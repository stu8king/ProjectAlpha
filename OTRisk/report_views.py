import base64
import os
import re
from datetime import date
from io import BytesIO
from math import ceil

import inflect
import openai
from django.contrib.auth.decorators import login_required
from django.core import serializers
from django.db.models import Count, Avg, Func, Sum
from django.http import JsonResponse, HttpResponseRedirect, HttpResponseForbidden, HttpResponse
from django.shortcuts import get_object_or_404
from django.shortcuts import render
from django.urls import reverse
from reportlab.graphics.charts.barcharts import VerticalBarChart
from reportlab.graphics.shapes import Drawing, Rect, Image
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER
from reportlab.lib.pagesizes import letter
from reportlab.lib.sequencer import getSequencer
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.graphics.charts.textlabels import Label
from reportlab.lib.utils import ImageReader
from reportlab.pdfgen.canvas import Canvas
from reportlab.platypus import SimpleDocTemplate, PageBreak, Image
from reportlab.platypus import Table, TableStyle, Paragraph, Spacer

from OTRisk.models.Model_CyberPHA import tblCyberPHAHeader, tblCyberPHAScenario, vulnerability_analysis, \
    MitreControlAssessment, ScenarioConsequences, CyberSecurityInvestment, PHA_Observations
from OTRisk.models.raw import RAActions
from OTRisk.models.raw import RAWorksheet, RAWorksheetScenario
from accounts.models import UserProfile
from .pha_views import get_overall_control_effectiveness_score, get_api_key


class FooterCanvas(Canvas):
    def __init__(self, *args, **kwargs):
        Canvas.__init__(self, *args, **kwargs)
        self.pages = []

    def showPage(self):
        self.pages.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        page_count = len(self.pages)
        for page in self.pages:
            self.__dict__.update(page)
            self.draw_footer(page_count)
            Canvas.showPage(self)
        Canvas.save(self)

    def draw_footer(self, page_count):
        self.saveState()
        width, height = letter
        self.setFont('Helvetica', 10)

        # Draw left-aligned text
        self.drawString(inch, 0.75 * inch, "Report generated by AnzenOT")

        # Draw page number right-aligned
        self.drawRightString(width - inch, 0.75 * inch, f"Page {self._pageNumber} of {page_count}")

        # Draw "Confidential" centered and in bold
        self.setFont('Helvetica-Bold', 10)  # Set font to bold for "Confidential"
        self.drawCentredString(width / 2, 0.75 * inch, "Confidential")

        self.restoreState()


def create_bar_chart(scenario):
    # Data for the bar chart
    scores = [
        ('Safety', scenario.SafetyScore),
        ('Reputation', scenario.ReputationScore),
        ('Finance', scenario.FinancialScore),
        ('Data', scenario.DataScore),
        ('Supply Chain', scenario.SupplyChainScore),
        ('Danger', scenario.lifeScore),
        ('Operations', scenario.productionScore),
        ('Environment', scenario.environmentScore),
        ('Compliance', scenario.regulatoryScore)
    ]

    # Sort scores from highest to lowest
    sorted_scores = sorted(scores, key=lambda x: x[1], reverse=True)
    category_names, data = zip(*sorted_scores)

    # Create the drawing
    drawing = Drawing(400, 200)

    # Create the bar chart
    bc = VerticalBarChart()
    bc.x = 50
    bc.y = 50
    bc.height = 125
    bc.width = 300
    bc.data = [data]  # Needs to be a list of lists
    bc.strokeColor = colors.black

    # Set the category axis
    bc.categoryAxis.categoryNames = category_names
    bc.categoryAxis.labels.boxAnchor = 'ne'
    bc.categoryAxis.labels.angle = 45
    bc.categoryAxis.labels.dy = -15

    # Set the value axis
    bc.valueAxis.valueMin = 0
    bc.valueAxis.valueMax = 10
    bc.valueAxis.valueStep = 1

    # Bar properties
    bc.bars[0].fillColor = colors.blue

    # Add title
    title = Label()
    title.setOrigin(200, 190)  # Position title above the chart
    title.setText("Scenario Business Impact Analysis")
    title.fontSize = 14
    title.textAnchor = 'middle'
    drawing.add(title)

    # Add the bar chart to the drawing
    drawing.add(bc)

    return drawing


@login_required()
def pha_reports(request, cyber_pha_header_id):
    cyber_pha_header = get_object_or_404(tblCyberPHAHeader, ID=cyber_pha_header_id)
    user_profile = request.user.userprofile
    organization = user_profile.organization
    # Get the ID of the user who created the CyberPHA
    creator_user_id = cyber_pha_header.UserID

    # Get the organization ID of the user who created the CyberPHA
    creator_organization_id = UserProfile.objects.filter(user_id=creator_user_id).values_list('organization_id',
                                                                                              flat=True).first()

    # Get the current user's organization ID
    current_user_organization_id = request.user.userprofile.organization_id

    # Check if the current user is the creator or belongs to the same organization
    if str(request.user.id) != creator_user_id and current_user_organization_id != creator_organization_id:
        # Optionally, instead of logging out, you might want to redirect to a forbidden page or show an error message
        return HttpResponseRedirect(reverse('logout'))

    # Get the related records using the function we defined earlier
    context = get_pha_records(cyber_pha_header_id)

    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'inline; filename="report.pdf"'

    buffer = BytesIO()

    # Create a canvas and a PDF document.
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    story = []

    styles = getSampleStyleSheet()

    def onFirstPage(canvas, doc):
        canvas.saveState()
        canvas.setTitle("CyberPHA Report")
        width, height = letter

        # Assuming the logo is stored correctly in your static directory
        logo_path = os.path.join('static/images', 'anzenot_highres_small.jpg')
        canvas.drawImage(logo_path, width / 2.1 - 50, height / 1.8, 150, 150, mask='auto')  # Center the logo

        # Draw 'Report for' and 'Prepared for' text
        canvas.setFont('Helvetica-Bold', 12)
        canvas.drawString(inch, height / 2 - 40, f"Report for: {cyber_pha_header.FacilityName}")
        canvas.drawString(inch, height / 2 - 70, f"Prepared for: {organization.name}")
        current_date = date.today().strftime("%B %d, %Y")
        canvas.setFont('Helvetica', 12)
        canvas.drawString(inch, height / 2 - 120, current_date)
        canvas.restoreState()

    doc.build(story, onFirstPage=onFirstPage)
    story.append(PageBreak())
    custom_bold_style = ParagraphStyle('CustomBold', parent=styles['BodyText'], fontName='Helvetica-Bold')
    body_text_style = ParagraphStyle('BodyTextWithMarkup', parent=styles['BodyText'], fontName='Helvetica',
                                     allowMarkup=True)

    # Add a title
    report_title = f"CyberPHA Report for {cyber_pha_header.FacilityName}"
    title = Paragraph(report_title, styles['Title'])
    story.append(title)
    story.append(Spacer(1, 20))  # Add some space below the title

    # Add Executive Summary section
    executive_summary_title = "Executive Summary"
    executive_summary = Paragraph(executive_summary_title, styles['Heading2'])
    story.append(executive_summary)
    story.append(Spacer(1, 12))

    executive_summary_text = f"This is a report for a CyberPHA risk assessment conducted at {cyber_pha_header.FacilityName}, a {cyber_pha_header.FacilityType} at {cyber_pha_header.facilityAddress}, {cyber_pha_header.facilityCity}, {cyber_pha_header.facilityCode}, {cyber_pha_header.country}. The assessment was conducted between {cyber_pha_header.AssessmentStartDate} and {cyber_pha_header.AssessmentEndDate}. The assessment leader was {cyber_pha_header.PHALeader}"
    summary_paragraph = Paragraph(executive_summary_text, styles['BodyText'])
    story.append(summary_paragraph)
    story.append(Spacer(1, 12))
    cyber_pha_scenarios = context['cyber_pha_scenarios']
    scenario_count = len(cyber_pha_scenarios)  # Count the scenarios
    if scenario_count == 1:
        scenario_count_text = "One scenario was considered for this assessment. The scenario is described in the section below."
    else:
        scenario_count_text = f"{scenario_count} scenarios were considered for this assessment. The scenarios are described in the sections below."

    scenario_count_paragraph = Paragraph(scenario_count_text, styles['BodyText'])
    story.append(scenario_count_paragraph)
    story.append(Spacer(1, 12))

    likelihood_summary_text = f"Overall likelihood of the facility being affected by the given scenarios is: {context['overall_likelihood']}: "
    likelihood_summary_paragraph = Paragraph(likelihood_summary_text, body_text_style)
    story.append(likelihood_summary_paragraph)
    story.append(Spacer(1, 12))

    styles = getSampleStyleSheet()
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=1, spaceBefore=6, spaceAfter=6,
                                  fontSize=10)

    # Prepare data and labels for the bar chart
    impact_data = context['impact_summary']
    data = [list(impact_data.values())]  # Data for the chart
    categories = list(impact_data.keys())  # Category labels

    # Creating a drawing for the chart
    width, height = 450, 250
    drawing = Drawing(width, height)
    chart = VerticalBarChart()
    chart.x = 50
    chart.y = 75
    chart.height = 125
    chart.width = 300
    chart.data = data
    chart.categoryAxis.categoryNames = categories
    chart.valueAxis.valueMin = 0
    chart.valueAxis.valueMax = max(data[0]) + 1  # Set max value slightly higher than the max data value
    chart.bars.fillColor = colors.skyblue

    # Chart styles
    chart.categoryAxis.labels.boxAnchor = 'n'  # North alignment for category labels
    chart.categoryAxis.labels.angle = 45  # Optional: tilt the labels for better fit
    chart.categoryAxis.labels.fontSize = 8
    chart.categoryAxis.labels.dy = -10
    chart.categoryAxis.labels.dx = -10

    # Add the chart to the drawing
    drawing.add(chart)
    border = Rect(0, 0, width, height, strokeColor=colors.black, strokeWidth=1, fillColor=None)
    drawing.add(border)
    # Add a caption above the chart
    caption_text = "<b>Overall Scenario Business Impact Analysis</b>"
    caption_paragraph = Paragraph(caption_text, center_style)
    story.append(caption_paragraph)  # Adding caption above the chart
    story.append(drawing)  # Add the drawing with the chart to the story
    story.append(Spacer(1, 20))

    assessment_summary_text = f"OT Cybersecurity Controls are assessed as: {cyber_pha_header.last_assessment_score}/100: <b>{cyber_pha_header.last_assessment_summary} </b>"
    assessment_summary_paragraph = Paragraph(assessment_summary_text, body_text_style)
    story.append(assessment_summary_paragraph)
    story.append(Spacer(1, 12))

    # Dynamic summary based on PHA Score
    pha_score = cyber_pha_header.pha_score
    if pha_score < 25:
        risk_level = "<b>A moderately safe environment with few hazards.</b>"
    elif 25 <= pha_score < 50:
        risk_level = "<b>Facility has health and safety hazards. Visitors should be trained and aware of hazards while on site.</b>"
    elif 50 <= pha_score < 75:
        risk_level = "<b>Facility is likely to contain significant health and safety hazards. Proper training and/or PPE should be provided.</b>"
    else:
        risk_level = "<b>Facility contains hazards likely to represent a significant safety concern. Proper training and PPE is essential.</b>"

    score_summary_text = f"The facility AnzenOT PHA Score is assessed as: {pha_score}/100, indicating: <b>{risk_level}</b>"
    score_summary_paragraph = Paragraph(score_summary_text, body_text_style)
    story.append(score_summary_paragraph)
    story.append(Spacer(1, 12))

    story.append(PageBreak())

    caption_style = ParagraphStyle(name='Caption', parent=styles['BodyText'], alignment=TA_CENTER, fontSize=10,
                                   spaceBefore=5)
    caption_text = "Overall cost impact (all scenarios)"
    caption_paragraph = Paragraph(caption_text, caption_style)
    story.append(caption_paragraph)
    styles = getSampleStyleSheet()
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                  spaceAfter=4, fontSize=10)
    data = [
        [Paragraph(f"<b>Best Case:</b><br/>{context['total_cost_impact_low']}", center_style)],
        [Paragraph(f"<b>Most Likely:</b><br/>{context['total_cost_impact']}", center_style)],
        [Paragraph(f"<b>Worst Case:</b><br/>{context['total_cost_impact_high']}", center_style)]
    ]

    # Create the table
    table = Table(data, colWidths=[300], rowHeights=[30, 30, 30])

    # Style the table to have borders around each cell
    table.setStyle(TableStyle([
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 0), (-1, -1), colors.whitesmoke),
        ('LEFTPADDING', (0, 0), (-1, -1), 10),
        ('RIGHTPADDING', (0, 0), (-1, -1), 10),
        ('TOPPADDING', (0, 0), (-1, -1), 5),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 5)
    ]))

    # Add the table to the story
    story.append(table)

    story.append(Spacer(1, 12))

    story.append(PageBreak())
    scenarios_title = "Scenarios"
    scenarios_header = Paragraph(scenarios_title, styles['Heading2'])
    story.append(scenarios_header)
    story.append(Spacer(1, 12))
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER)

    # Get the list of scenarios from the context
    cyber_pha_scenarios = context['cyber_pha_scenarios']
    first_scenario = True
    # Iterate through each scenario in the list
    for index, scenario in enumerate(cyber_pha_scenarios, start=1):
        if index > 1:
            # Add a PageBreak before every new scenario after the first
            story.append(PageBreak())

        # Create a header for each scenario using its 'Scenario' attribute
        scenario_title = f"Scenario {index}: {scenario.Scenario}"
        scenario_header = Paragraph(scenario_title, styles['Heading3'])
        story.append(scenario_header)
        story.append(Spacer(1, 10))

        observations = scenario.observations.all() if hasattr(scenario, 'observations') else []

        styles = getSampleStyleSheet()
        center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                      spaceAfter=6, fontSize=12)

        # Modify the data preparation
        data = [
            [Paragraph(f"<b>Scenario Residual Risk:</b><br/>{scenario.RRa}", center_style)],
            [Paragraph(f"<b>Scenario Probability:</b><br/>{scenario.probability}", center_style)],
            [Paragraph(f"<b>Risk Recommendation:</b><br/>{scenario.risk_recommendation}", center_style)]
        ]

        # Create the table
        info_table = Table(data, colWidths=[300], rowHeights=[40, 40, 40])  # Adjust dimensions as needed

        # Define table style with added padding and spacing adjustments
        info_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BACKGROUND', (0, 0), (-1, -1), colors.whitesmoke),
            ('LEFTPADDING', (0, 0), (-1, -1), 10),
            ('RIGHTPADDING', (0, 0), (-1, -1), 10),
            ('TOPPADDING', (0, 0), (-1, -1), 5),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 5)
        ]))

        # Add the table to the story
        story.append(info_table)
        story.append(Spacer(1, 12))

        styles = getSampleStyleSheet()
        center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                      spaceAfter=4, fontSize=10)

        impact_values = [
            scenario.impactSafety, scenario.impactData, scenario.impactDanger,
            scenario.impactSupply, scenario.impactProduction, scenario.impactFinance,
            scenario.impactEnvironment, scenario.impactSupply
        ]

        # Creating a drawing for the chart
        width, height = 450, 250
        drawing = Drawing(width, height)
        chart = VerticalBarChart()
        chart.x = 50
        chart.y = 75
        chart.height = 125
        chart.width = 300
        chart.data = [impact_values]
        chart.valueAxis.valueMin = 0
        chart.valueAxis.valueMax = 11  # Set max value slightly higher than the max data value
        chart.bars.fillColor = colors.skyblue
        # Add category names
        chart.categoryAxis.categoryNames = [
            'Safety', 'Data', 'Danger', 'Supply', 'Production', 'Finance', 'Environment', 'Supply'
        ]

        # Chart styles
        # chart.bars.fillColor = colors.royalblue
        chart.categoryAxis.labels.boxAnchor = 'n'  # North alignment for category labels
        chart.categoryAxis.labels.angle = 45  # Optional: tilt the labels for better fit
        chart.categoryAxis.labels.fontSize = 8
        chart.categoryAxis.labels.dy = -10
        chart.categoryAxis.labels.dx = -10

        drawing.add(chart)
        border = Rect(0, 0, width, height, strokeColor=colors.black, strokeWidth=1, fillColor=None)
        drawing.add(border)

        caption_text = "Scenario Business Impact Analysis"
        caption_paragraph = Paragraph(caption_text, center_style)
        story.append(caption_paragraph)  # Adding caption above the chart in the story
        story.append(drawing)
        story.append(Spacer(1, 20))

        titles = ['Best Case:', 'Most Likely Case:', 'Worst Case:']
        values = [
            "${:,}".format(int(scenario.sle_low)),  # Assuming scenario.sle_low and others are integers
            "${:,}".format(int(scenario.sle)),
            "${:,}".format(int(scenario.sle_high))
        ]

        # Create data array for the table
        data = [[Paragraph(f"<b>{title}</b><br/>{value}", center_style)] for title, value in zip(titles, values)]

        # Define the table dimensions
        table = Table(data, colWidths=[300] * len(data), rowHeights=[30] * len(data))

        # Styling the table
        table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BACKGROUND', (0, 0), (-1, -1), colors.whitesmoke),
            ('LEFTPADDING', (0, 0), (-1, -1), 10),
            ('RIGHTPADDING', (0, 0), (-1, -1), 10),
            ('TOPPADDING', (0, 0), (-1, -1), 5),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 5)
        ]))

        # Caption for the table
        caption_style = ParagraphStyle(name='Caption', parent=styles['BodyText'], alignment=TA_CENTER, fontSize=10,
                                       spaceBefore=5)
        caption_text = "Scenario Estimated Cost Impact"
        caption_paragraph = Paragraph(caption_text, caption_style)

        # Add the caption and the table to the story
        story.append(caption_paragraph)
        story.append(table)
        story.append(Spacer(1, 20))

        if observations:
            observations_header = Paragraph("Observations:", styles['Heading4'])
            story.append(observations_header)
            story.append(Spacer(1, 10))

            for obs in observations:
                observation_paragraph = Paragraph(obs.observation_description, styles['BodyText'])
                story.append(observation_paragraph)
                story.append(Spacer(1, 10))

        story.append(Spacer(1, 20))
        recommendations_list = scenario.recommendations.strip().split('\n')

        # Create table data, where each recommendation is in its own row and cell
        table_data = [[Paragraph(rec, styles['BodyText'])] for rec in recommendations_list]

        # Define the table
        recommendations_table = Table(table_data, colWidths=[450])  # Set column width to fit your page

        # Define table style to add borders and spacing
        recommendations_table.setStyle(TableStyle([
            ('BOX', (0, 0), (-1, -1), 1, colors.black),  # Border around each cell
            ('INNERGRID', (0, 0), (-1, -1), 1, colors.black),  # Grid lines between cells
            ('TOPPADDING', (0, 0), (-1, -1), 5),  # Padding inside each cell
            ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
            ('ROWBACKGROUNDS', (0, 0), (-1, -1), [None, colors.whitesmoke]),  # Alternate background colors
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),  # Align text to the top of the cell
        ]))
        caption_text = "Recommendations"
        caption_paragraph = Paragraph(caption_text, styles['Title'])
        story.append(caption_paragraph)
        story.append(Spacer(1, 12))
        # Add the table to the story, with a Spacer to add space after the table
        story.append(recommendations_table)
        story.append(Spacer(1, 12))  # Space after the table before the next content

        # Check if the risk_treatment_plan field exists and is not empty
        if hasattr(scenario, 'risk_treatment_plan') and scenario.risk_treatment_plan:
            # Split the risk treatment plan into individual steps
            treatment_steps = scenario.risk_treatment_plan.strip().split('\n')

            # Prepare table data, where each step is in its own row and cell
            table_data = [[Paragraph(step, styles['BodyText'])] for step in treatment_steps]

            # Create the table and define styles
            risk_treatment_table = Table(table_data, colWidths=[450])  # Set column width to fit your page
            risk_treatment_table.setStyle(TableStyle([
                ('BOX', (0, 0), (-1, -1), 1, colors.black),  # Border around each cell
                ('INNERGRID', (0, 0), (-1, -1), 1, colors.black),  # Grid lines between cells
                ('TOPPADDING', (0, 0), (-1, -1), 5),  # Padding inside each cell
                ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                ('ROWBACKGROUNDS', (0, 0), (-1, -1), [None, colors.whitesmoke]),  # Alternate background colors
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),  # Align text to the top of the cell
            ]))

            # Add a caption above the table
            caption_text = "Risk Treatment Plan"
            caption_paragraph = Paragraph(caption_text, styles['Title'])
            story.append(caption_paragraph)
            story.append(Spacer(1, 12))

            # Add the table to the story
            story.append(risk_treatment_table)
            story.append(Spacer(1, 12))  # Space after the table before the next content
        else:
            # Handle the case where the risk_treatment_plan field is missing or empty
            no_data_paragraph = Paragraph("Risk treatment plan has not been defined.", styles['BodyText'])
            story.append(no_data_paragraph)
            story.append(Spacer(1, 12))

        # Checking if the compliance_map field exists and is not empty
        if hasattr(scenario, 'compliance_map') and scenario.compliance_map:
            compliance_entries = scenario.compliance_map.split(" || ")
            table_data = []

            # Process each compliance entry if not empty
            for entry in compliance_entries:
                parts = entry.split(" > ")
                if len(parts) == 3:
                    framework, rule, url = parts
                    table_data.append([Paragraph(framework, styles['BodyText']),
                                       Paragraph(rule, styles['BodyText']),
                                       Paragraph(url, styles['BodyText'])])

            # Only create the table if there are entries to display
            if table_data:
                # Create the table and define styles
                compliance_table = Table(table_data, colWidths=[150, 150, 150], hAlign='LEFT')
                compliance_table.setStyle(TableStyle([
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                    ('BACKGROUND', (0, 0), (-1, 0), colors.white),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ]))

                # Add a title for the table
                compliance_title = Paragraph('Compliance Map', styles['Heading4'])
                story.append(compliance_title)
                story.append(Spacer(1, 10))

                # Add the table to the story
                story.append(compliance_table)
                story.append(Spacer(1, 20))
            else:
                # Handle the case where there are no valid entries
                no_data_paragraph = Paragraph("No compliance data available.", styles['BodyText'])
                story.append(no_data_paragraph)
                story.append(Spacer(1, 10))
        else:
            # Handle the case where the compliance_map field is missing or empty
            no_data_paragraph = Paragraph("No compliance map provided.", styles['BodyText'])
            story.append(no_data_paragraph)
            story.append(Spacer(1, 10))

    story.append(PageBreak())
    safety_summary_title = "Safety Summary"
    safety_summary = Paragraph(safety_summary_title, styles['Heading2'])
    story.append(safety_summary)
    story.append(Spacer(1, 12))

    # Cleaning and preparing the safety summary list
    safety_summary_list = context['safety_summary_list']
    safety_summary_cleaned = [item.strip() for item in safety_summary_list if item.strip() != '']

    safety_summary_cleaned = [re.sub(r'^\d+\.\s*', '', item) for item in safety_summary_cleaned]

    # Constructing the numbered list string
    sequencer = getSequencer()
    sequencer.reset('safetySummary')  # Resetting the sequencer
    safety_summary_text = "<br/>".join(f"<seq id='safetySummary'>. {item}" for item in safety_summary_cleaned)

    # Define the paragraph style for the list with indentation for better readability
    list_style = ParagraphStyle(
        name='ListStyle',
        parent=styles['BodyText'],
        leftIndent=0,
        firstLineIndent=-0,
        spaceBefore=10,
        bulletIndent=10,
        allowOrphans=1
    )

    # Creating the paragraph with the list
    safety_summary_paragraph = Paragraph(safety_summary_text, list_style)
    story.append(safety_summary_paragraph)
    story.append(Spacer(1, 20))

    # Chemical summary
    chemical_summary_title = "Chemical Summary"
    chemical_summary = Paragraph(chemical_summary_title, styles['Heading2'])
    story.append(chemical_summary)
    story.append(Spacer(1, 12))

    # Cleaning and preparing the safety summary list
    chemical_summary_list = context['chemical_summary_list']
    chemical_summary_cleaned = [item.strip() for item in chemical_summary_list if item.strip() != '']

    chemical_summary_cleaned = [re.sub(r'^\d+\.\s*', '', item) for item in chemical_summary_cleaned]

    # Constructing the numbered list string
    sequencer = getSequencer()
    sequencer.reset('chemicalSummary')  # Resetting the sequencer
    chemical_summary_text = "<br/>".join(f"<seq id='chemicalSummary'>. {item}" for item in chemical_summary_cleaned)

    # Define the paragraph style for the list with indentation for better readability
    list_style = ParagraphStyle(
        name='ListStyle',
        parent=styles['BodyText'],
        leftIndent=0,
        firstLineIndent=-0,
        spaceBefore=10,
        bulletIndent=10,
        allowOrphans=1
    )

    # Creating the paragraph with the list
    chemical_summary_paragraph = Paragraph(chemical_summary_text, list_style)
    story.append(chemical_summary_paragraph)
    story.append(Spacer(1, 20))

    story.append(PageBreak())
    doc_summary_title = "Appendix - Report Description"
    doc_summary = Paragraph(doc_summary_title, styles['Heading2'])
    story.append(doc_summary)
    story.append(Spacer(1, 12))

    doc_text = "This report was generated by AnzenOT. Data relating to risk scoring and costs have been estimated based on available information at the time that data for the assessment was submitted by the user. All reported numbers and recommendations should be carefully reviewed and considered against other factors that may not be available to AnzenOT in this report such as up-to-date threat intelligence, network configurations, state of staff training, and overall maturity of cybersecurity within the organization.  "
    doc_text_summary = Paragraph(doc_text)
    story.append(doc_text_summary)
    story.append(Spacer(1, 12))

    doc_text = "AnzenOT makes no representations about the accuracy or completeness of the data presented in this report. It is recommended that the report is reviewed by OT Cybersecurity specialists familiar with the organization's overall security posture."
    doc_text_summary = Paragraph(doc_text)
    story.append(doc_text_summary)
    story.append(Spacer(1, 12))
    # Build the PDF
    doc.build(story, canvasmaker=FooterCanvas)

    # Get the value of the BytesIO buffer and write it to the response.
    pdf = buffer.getvalue()
    buffer.close()
    response.write(pdf)
    response = HttpResponse(pdf, content_type='application/pdf')
    response['Content-Disposition'] = 'inline; filename="CyberPHA.pdf"'
    return response

    # Render the pha_report.html template with the context
    # return render(request, 'pha_report.html', context)


def get_pha_records(cyber_pha_header_id):
    # Retrieve the main record from tblCyberPHAHeader
    cyber_pha_header = get_object_or_404(tblCyberPHAHeader, ID=cyber_pha_header_id)

    other_summary_list = cyber_pha_header.otherSummary.split('\n')
    other_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in other_summary_list if item)
    chemical_summary_list = cyber_pha_header.chemicalSummary.split('\n')
    chemical_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in chemical_summary_list if item)
    safety_summary_list = cyber_pha_header.safetySummary.split('\n')
    safety_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in safety_summary_list if item)
    compliance_summary_list = cyber_pha_header.complianceSummary.split('\n')
    compliance_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in compliance_summary_list if item)
    physical_summary_list = cyber_pha_header.physicalSummary.split('\n')
    physical_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in physical_summary_list if item)

    insight_summary_list = cyber_pha_header.insightSummary.split('\n')
    insight_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in insight_summary_list if item)
    strategy_summary_list = cyber_pha_header.strategySummary.split('\n')
    strategy_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in strategy_summary_list if item)
    threat_summary_list = cyber_pha_header.threatSummary.split('\n')
    threat_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in threat_summary_list if item)

    # Retrieve related records from tblCyberPHAScenario
    cyber_pha_scenarios = tblCyberPHAScenario.objects.filter(CyberPHA=cyber_pha_header)
    # Scenario-wise data
    scenario_data = []
    for scenario in cyber_pha_scenarios:
        observations = PHA_Observations.objects.filter(scenario=scenario)
        observation_descriptions = [obs.observation_description for obs in observations]

        scenario_info = {
            'scenario_id': scenario.ID,
            'observations': observation_descriptions
        }
        scenario_data.append(scenario_info)

    total_cost_impact = format_currency(cyber_pha_scenarios.aggregate(Sum('sle'))['sle__sum'])

    total_cost_impact_low = format_currency(cyber_pha_scenarios.aggregate(Sum('sle_low'))['sle_low__sum'])

    total_cost_impact_high = format_currency(cyber_pha_scenarios.aggregate(Sum('sle_high'))['sle_high__sum'])

    # Summarize RiskCategory
    risk_category_summary = cyber_pha_scenarios.values('RiskCategory').annotate(count=Count('RiskCategory'))

    impact_fields = [f.name for f in tblCyberPHAScenario._meta.get_fields() if f.name.startswith('impact')]
    impact_summary = {}
    for field in impact_fields:
        avg_value = cyber_pha_scenarios.aggregate(avg_value=Avg(field))['avg_value']
        custom_name = field.replace('impact', '')
        impact_summary[custom_name] = avg_value

    # Fetch all probability values, strip the % sign, and convert to integers
    try:
        probabilities = [float(prob.probability.rstrip('%')) for prob in cyber_pha_scenarios.only('probability')]

        # Calculate the average probability
        average_probability = round(sum(probabilities) / len(probabilities) if probabilities else 0)
    except:
        average_probability = 0

    # Retrieve related records from vulnerability_analysis
    vulnerability_analyses = vulnerability_analysis.objects.filter(scenario__CyberPHA=cyber_pha_header)

    # Retrieve related records from RAActions where phaID matches the given cyber_pha_header_id
    ra_actions = RAActions.objects.filter(phaID=cyber_pha_header_id)
    ra_actions_json = serializers.serialize('json', ra_actions)
    # Retrieve related records from MitreControlAssessment
    mitre_control_assessments = MitreControlAssessment.objects.filter(cyberPHA=cyber_pha_header)

    overall_control_effectiveness = int(ceil(get_overall_control_effectiveness_score(cyber_pha_header_id)))

    # Fetch all user-defined likelihood values
    user_likelihoods = [scenario.likelihood for scenario in cyber_pha_scenarios]

    # Calculate the average user-defined likelihood
    average_user_likelihood = sum(user_likelihoods) / len(user_likelihoods) if user_likelihoods else 0

    # Calculate the overall likelihood
    # This is a weighted average where we give equal weight to user-defined likelihood and calculated likelihood
    overall_likelihood = round((average_probability + average_user_likelihood) / 2 * (
            1 - (overall_control_effectiveness / 100)))

    return {
        'cyber_pha_header': cyber_pha_header,
        'cyber_pha_scenarios': cyber_pha_scenarios,
        'average_probability': average_probability,
        'risk_category_summary': risk_category_summary,
        'impact_summary': impact_summary,
        'vulnerability_analyses': vulnerability_analyses,
        'ra_actions_json': ra_actions_json,
        'mitre_control_assessments': mitre_control_assessments,
        'total_cost_impact': total_cost_impact,
        'total_cost_impact_low': total_cost_impact_low,
        'total_cost_impact_high': total_cost_impact_high,
        'compliance_summary_html': compliance_summary_html,
        'safety_summary_html': safety_summary_html,
        'safety_summary_list': safety_summary_list,
        'chemical_summary_list': chemical_summary_list,
        'physical_summary_list': physical_summary_list,
        'chemical_summary_html': chemical_summary_html,
        'physical_summary_html': physical_summary_html,
        'other_summary_html': other_summary_html,
        'insight_summary_html': insight_summary_html,
        'strategy_summary_html': strategy_summary_html,
        'threat_summary_html': threat_summary_html,
        'overall_control_effectiveness': overall_control_effectiveness,
        'overall_likelihood': overall_likelihood
    }


class Replace(Func):
    function = 'REPLACE'
    template = "%(function)s(%(expressions)s, %(value_1)s, %(value_2)s)"


def format_currency(value):
    if value is None:
        return "$0.00"  # or whatever default or placeholder you want to use

    if value >= 1_000_000_000:  # Billions
        return "${:.1f}b".format(value / 1_000_000_000)
    elif value >= 1_000_000:  # Millions
        return "${:.1f}m".format(value / 1_000_000)
    elif value >= 1_000:  # Thousands
        return "${:.1f}k".format(value / 1_000)
    else:
        return "${:.2f}".format(value)


login_required()


def scenario_investment_report(cyber_pha_id, scenario_id):
    # Fetch the scenario and related investments
    try:
        cyber_pha = tblCyberPHAHeader.objects.get(ID=cyber_pha_id)
        scenario = tblCyberPHAScenario.objects.get(ID=scenario_id, CyberPHA_id=cyber_pha_id)
        investments = CyberSecurityInvestment.objects.filter(cyber_pha_header_id=cyber_pha_id)
    except tblCyberPHAScenario.DoesNotExist:
        return "Scenario not found."

    if not investments.exists():
        return "No investments found for this CyberPHA."

    # Construct the investment statement
    investment_statement = "\n".join(
        [f"- {inv.investment_type}: {inv.product_name} by {inv.vendor_name}, costing {inv.cost} on {inv.date}." for inv
         in investments])
    facility_details = f"Industry: {cyber_pha.Industry}, Facility Type: {cyber_pha.FacilityType}, Country: {cyber_pha.country}"
    # Construct the scenario details
    scenario_details = f"""
    Scenario: {scenario.Scenario}
    Threat Class: {scenario.ThreatClass}
    Threat Agent: {scenario.ThreatAgent}
    Threat Action: {scenario.ThreatAction}
    Countermeasures: {scenario.Countermeasures}
    """

    # Construct the impacts
    impacts = f"""
    Safety Impact: {scenario.impactSafety}
    Danger Impact: {scenario.impactDanger}
    Production Impact: {scenario.impactProduction}
    Financial Impact: {scenario.impactFinance}
    Reputation Impact: {scenario.impactReputation}
    Environment Impact: {scenario.impactEnvironment}
    Regulation Impact: {scenario.impactRegulation}
    Data Impact: {scenario.impactData}
    Supply Impact: {scenario.impactSupply}
    """

    # OpenAI prompt
    investment_impact_prompt = f"""
        Given the cybersecurity scenario for the {cyber_pha.FacilityType} in the {cyber_pha.Industry} industry, located in {cyber_pha.country}, and the following investments:
        {investment_statement}
    and considering the scenario details:
    {scenario_details}
    with the impacts as follows:
    {impacts}
    Please provide exactly 6 bullet points summarizing the impact of these investments for the given scenario on:
    1. Level of risk reduction
    2. Business impact analysis improvement
    3. Event costs mitigation
    4. Operational risks decrease
    5. Compliance enhancement
    6. Return on investment or cost savings
    Each bullet point should contain a concise statement (no more than 30 words) quantifying the impact. Be cautiously and modestly optimistic.
    """

    # Configure OpenAI API key
    openai.api_key = get_api_key("openai")
    openai_model = get_api_key("OpenAI_Model")
    # Query OpenAI API for investment impact analysis
    investment_impact_response = openai.ChatCompletion.create(
        model=openai_model,  # Ensure this model name is current and available for your use
        messages=[
            {"role": "system", "content": "You are a knowledgeable assistant about cybersecurity investments."},
            {"role": "user", "content": investment_impact_prompt}
        ],
        temperature=0.3,  # Adjust creativity
        max_tokens=800,
    )

    # Extract the response
    investment_impact_text = investment_impact_response['choices'][0]['message']['content'].strip()

    return investment_impact_text


def get_scenario_report_details(request):
    scenario_id = request.GET.get('id')

    scenario = tblCyberPHAScenario.objects.get(ID=scenario_id)

    creator_user_id = scenario.CyberPHA.UserID

    # Get the organization ID of the user who created the CyberPHA
    creator_organization_id = UserProfile.objects.filter(user_id=creator_user_id).values_list('organization_id',
                                                                                              flat=True).first()

    # Get the current user's organization ID
    current_user_organization_id = request.user.userprofile.organization_id

    # Check if the current user is the creator or belongs to the same organization
    if str(request.user.id) != creator_user_id and current_user_organization_id != creator_organization_id:
        # Log out the user
        return HttpResponseRedirect(reverse('logout'))

    cyber_pha_id = scenario.CyberPHA.ID
    investment_impact_text = scenario_investment_report(cyber_pha_id, scenario_id)

    control_effectiveness = int(ceil(get_overall_control_effectiveness_score(scenario.CyberPHA)))
    controls = scenario.controls.all().values('control', 'score', 'reference')
    sle = format_currency(scenario.sle)

    sle_low = format_currency(scenario.sle_low)

    sle_high = format_currency(scenario.sle_high)
    # calculate the overall likelihood of the scenario
    probability_value = int(round(float(scenario.probability.rstrip('%'))))

    inherent_likelihood = scenario.likelihood / 100.0  # Convert percentage to a fraction
    residual_likelihood = probability_value / 100.0  # Convert percentage to a fraction

    scenario_likelihood = categorize_likelihood((inherent_likelihood * residual_likelihood) * 100)
    # Retrieve related consequences
    consequences = ScenarioConsequences.objects.filter(scenario=scenario)
    consequences_list = [{'consequence_text': consequence.consequence_text, 'is_validated': consequence.is_validated}
                         for consequence in consequences]
    attack_tree_text = scenario.attack_tree_text
    data = {
        'impactSafety': scenario.impactSafety,
        'impactDanger': scenario.impactDanger,
        'impactProduction': scenario.impactProduction,
        'impactFinance': scenario.impactFinance,
        'impactReputation': scenario.impactReputation,
        'impactEnvironment': scenario.impactEnvironment,
        'impactRegulation': scenario.impactRegulation,
        'impactData': scenario.impactData,
        'impactSupply': scenario.impactSupply,
        'RRU': scenario.RRU,
        'UEL': scenario.UEL,
        'SM': scenario.SM,
        'MEL': scenario.MEL,
        'RRM': scenario.RRM,
        'Consequence': scenario.Consequence,
        'ThreatClass': scenario.ThreatClass,
        'RiskCategory': scenario.RiskCategory,
        'RRa': scenario.RRa,
        'recommendations': scenario.recommendations,
        'standards': scenario.standards,
        'sle': sle,
        'sle_low': sle_low,
        'sle_high': sle_high,
        'residual_risk': scenario.RRa,
        'control_effectiveness': control_effectiveness,
        'scenario_likelihood': scenario_likelihood,
        'controls': list(controls),
        'Consequences': consequences_list,
        'attack_tree_text': attack_tree_text,
        'investment_impact': investment_impact_text
    }
    return JsonResponse(data)


def categorize_likelihood(likelihood_percentage):
    if 0 <= likelihood_percentage <= 20:
        return "Low"
    elif 21 <= likelihood_percentage <= 40:
        return "Low/Medium"
    elif 41 <= likelihood_percentage <= 60:
        return "Medium"
    elif 61 <= likelihood_percentage <= 80:
        return "Medium/High"
    else:
        return "High"


@login_required
def qraw_reports(request, qraw_id):
    referrer = request.META.get('HTTP_REFERER')

    if not referrer or 'qraw' not in referrer:
        return HttpResponseForbidden()
    # Get the related records using the function we defined earlier
    context = get_qraw_records(qraw_id)

    # Render the pha_report.html template with the context
    return render(request, 'qraw_report.html', context)


def get_qraw_records(qraw_id):
    # Retrieve the main record from tblRAWorksheet
    qraw_header = get_object_or_404(RAWorksheet, ID=qraw_id)

    # Retrieve related records from tblCyberPHAScenario
    qraw_scenarios = RAWorksheetScenario.objects.filter(RAWorksheetID=qraw_id)

    total_cost_impact = format_currency(qraw_scenarios.aggregate(Sum('event_cost_median'))['event_cost_median__sum'])

    total_cost_impact_low = format_currency(qraw_scenarios.aggregate(Sum('event_cost_low'))['event_cost_low__sum'])

    total_cost_impact_high = format_currency(qraw_scenarios.aggregate(Sum('event_cost_high'))['event_cost_high__sum'])

    # Summarize RiskCategory
    risk_category_summary = qraw_scenarios.values('threatSource').annotate(count=Count('threatSource'))

    model_class = RAWorksheetScenario

    # Define a set of fields to exclude
    exclude_fields = {'RiskScore', 'ThreatScore', 'VulnScore', 'OperationScore'}

    # Adjust the list comprehension to exclude the unwanted fields
    impact_fields = [f.name for f in model_class._meta.get_fields() if
                     'score' in f.name.lower() and f.name not in exclude_fields]

    impact_summary = {}
    for field in impact_fields:
        avg_value = qraw_scenarios.aggregate(avg_value=Avg(field))['avg_value']
        custom_name = field.replace('Score', '')
        custom_name = custom_name.title()
        impact_summary[custom_name] = avg_value

    # Retrieve related records from RAActions where phaID matches the given cyber_pha_header_id
    ra_actions = RAActions.objects.filter(RAWorksheetID=qraw_id)

    overall_scores = qraw_scenarios.aggregate(
        avg_vulnerability=Avg('VulnScore'),
        avg_threat=Avg('ThreatScore'),
        avg_inherent_risk=Avg('RiskScore'),
        avg_residual_risk=Avg('residual_risk')
    )

    # Normalize the scores to be out of 10
    normalized_scores = {
        'overall_vulnerability_score': overall_scores['avg_vulnerability'],
        'overall_threat_score': overall_scores['avg_threat'],
        'overall_inherent_risk_score': overall_scores['avg_inherent_risk'],
        'overall_residual_risk_score': overall_scores['avg_residual_risk']
    }
    anychart_key = get_api_key('anychart')
    return {
        'risk_category_summary': risk_category_summary,
        'qraw_header': qraw_header,
        'impact_summary': impact_summary,
        'ra_actions': ra_actions,
        'total_cost_impact': total_cost_impact,
        'total_cost_impact_low': total_cost_impact_low,
        'total_cost_impact_high': total_cost_impact_high,
        'qraw_scenarios': qraw_scenarios,
        'anychart_key': anychart_key,
        **normalized_scores
    }


def get_qraw_scenario_report_details(request):
    scenario_id = request.GET.get('id');

    scenario = RAWorksheetScenario.objects.get(ID=scenario_id)
    # Retrieve associated controls for the scenario
    controls = scenario.controls.all().values('control', 'score')

    event_cost_low = format_currency(scenario.event_cost_low)

    event_cost_median = format_currency(scenario.event_cost_median)

    event_cost_high = format_currency(scenario.event_cost_high)

    data = {
        'impactSafety': scenario.SafetyScore,
        'impactDanger': scenario.lifeScore,
        'impactProduction': scenario.productionScore,
        'impactFinance': scenario.FinancialScore,
        'impactReputation': scenario.ReputationScore,
        'impactEnvironment': scenario.environmentScore,
        'impactRegulation': scenario.regulatoryScore,
        'impactData': scenario.DataScore,
        'impactSupply': scenario.SupplyChainScore,
        'risk_summary': scenario.riskSummary,
        'residual_risk': scenario.residual_risk,
        'inherent_risk_score': scenario.RiskScore,
        'inherent_risk_status': scenario.RiskStatus,
        'outage': scenario.outage,
        'event_cost_low': event_cost_low,
        'event_cost_median': event_cost_median,
        'event_cost_high': event_cost_high,
        'vulnerability_score': scenario.VulnScore,
        'threat_score': scenario.ThreatScore,
        'threat_source': scenario.threatSource,
        'controls': list(controls),
        'consequences': scenario.raw_consequences,
        'executive_summary': scenario.executive_summary,
        'scenario_damage': scenario.scenario_damage

    }
    return JsonResponse(data)


def get_risk_rating(value):
    if value in [0, 1, 2]:
        return "Low"
    elif value in [3, 4]:
        return "Low/Medium"
    elif value in [5, 6]:
        return "Medium"
    elif value == 7:
        return "Medium/High"
    elif value in [8, 9]:
        return "High"
    elif value == 10:
        return "Very High"
    return ""


def parse_executive_summary(executive_summary, style):
    lines = executive_summary.split('\n')
    table_data = []
    for line in lines:
        parts = line.split('. ', 1)
        if len(parts) == 2:
            number = Paragraph(parts[0], style)
            text_and_reference = parts[1].rsplit(' [', 1)
            if len(text_and_reference) == 2:
                text = Paragraph(text_and_reference[0], style)
                reference = Paragraph('[' + text_and_reference[1], style)  # Add the leading bracket back
                table_data.append([number, text, reference])
    return table_data


def parse_consequences(raw_consequences, style):
    lines = raw_consequences.split('\n')
    bullet_points = []
    for line in lines:
        if line.startswith('- '):
            bullet_points.append(Paragraph(line[2:], style))
    return bullet_points


@login_required()
def raw_reports(request, raw_id):
    p = inflect.engine()
    raw_header = get_object_or_404(RAWorksheet, ID=raw_id)
    user_profile = request.user.userprofile
    organization = user_profile.organization
    # Get the ID of the user who created the CyberPHA
    creator_user_id = raw_header.UserID
    current_user_organization_id = raw_header.organization_id

    context = get_raw_records(raw_id)
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'inline; filename="report.pdf"'

    buffer = BytesIO()
    # Create a canvas and a PDF document.
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    story = []

    styles = getSampleStyleSheet()

    def onFirstPage(canvas, doc):
        canvas.saveState()
        canvas.setTitle("CyberPHA Report")
        width, height = letter

        # Assuming the logo is stored correctly in your static directory
        logo_path = os.path.join('static/images', 'anzenot_highres_small.jpg')
        canvas.drawImage(logo_path, width / 2.1 - 50, height / 1.8, 150, 150, mask='auto')  # Center the logo

        # Draw 'Report for' and 'Prepared for' text
        canvas.setFont('Helvetica-Bold', 12)
        canvas.drawString(inch, height / 2 - 40, f"Report for: {raw_header.BusinessUnit}")
        canvas.drawString(inch, height / 2 - 70, f"Prepared for: {organization.name}")
        current_date = date.today().strftime("%B %d, %Y")
        canvas.setFont('Helvetica', 12)
        canvas.drawString(inch, height / 2 - 120, current_date)
        canvas.restoreState()

    doc.build(story, onFirstPage=onFirstPage)
    story.append(PageBreak())
    custom_bold_style = ParagraphStyle('CustomBold', parent=styles['BodyText'], fontName='Helvetica-Bold')
    body_text_style = ParagraphStyle('BodyTextWithMarkup', parent=styles['BodyText'], fontName='Helvetica',
                                     allowMarkup=True)

    # Add a title
    report_title = f"Risk Assessment Report for {raw_header.BusinessUnit}"
    title = Paragraph(report_title, styles['Title'])
    story.append(title)
    story.append(Spacer(1, 20))  # Add some space below the title

    # Add Executive Summary section
    executive_summary_title = "Executive Summary"
    executive_summary = Paragraph(executive_summary_title, styles['Heading2'])
    story.append(executive_summary)
    story.append(Spacer(1, 12))

    executive_summary_text = f"This is a report for a risk assessment conducted at {raw_header.BusinessUnit}, a {raw_header.BusinessUnitType} at {raw_header.business_unit_address_line1}, {raw_header.business_unit_city}, {raw_header.business_unit_postcode}, {raw_header.business_unit_country}. The assessment was conducted on {raw_header.RADate} by {raw_header.AssessorName}"
    summary_paragraph = Paragraph(executive_summary_text, styles['BodyText'])
    story.append(summary_paragraph)
    story.append(Spacer(1, 12))

    # Data for the table
    table_data = [
        ["Risk Assessment Title:", raw_header.RATitle],
        ["Reason for risk assessment (Trigger Event):", raw_header.RATrigger],
        ["Asset or observation under assessment:", raw_header.asset]
    ]

    # Create the table
    table = Table(table_data, hAlign='LEFT')

    # Define the table style
    table.setStyle(TableStyle([
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('TOPPADDING', (0, 0), (-1, -1), 12),
        ('LEFTPADDING', (0, 0), (-1, -1), 5),
        ('RIGHTPADDING', (0, 0), (-1, -1), 0),
        # Add more styling as needed
    ]))
    story.append(table)
    story.append(Spacer(1, 12))

    styles = getSampleStyleSheet()
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=1, spaceBefore=6, spaceAfter=6,
                                  fontSize=10)

    # Prepare data and labels for the bar chart
    impact_data = context['impact_summary']
    data = [list(impact_data.values())]  # Data for the chart
    categories = list(impact_data.keys())  # Category labels

    # Creating a drawing for the chart
    width, height = 450, 250
    drawing = Drawing(width, height)
    chart = VerticalBarChart()
    chart.x = 50
    chart.y = 75
    chart.height = 125
    chart.width = 300
    chart.data = data
    chart.categoryAxis.categoryNames = categories
    chart.valueAxis.valueMin = 0
    chart.valueAxis.valueMax = max(data[0]) + 1  # Set max value slightly higher than the max data value
    chart.bars.fillColor = colors.skyblue

    # Chart styles
    chart.categoryAxis.labels.boxAnchor = 'n'  # North alignment for category labels
    chart.categoryAxis.labels.angle = 45  # Optional: tilt the labels for better fit
    chart.categoryAxis.labels.fontSize = 8
    chart.categoryAxis.labels.dy = -10
    chart.categoryAxis.labels.dx = -10

    # Add the chart to the drawing
    drawing.add(chart)
    border = Rect(0, 0, width, height, strokeColor=colors.black, strokeWidth=1, fillColor=None)
    drawing.add(border)
    # Add a caption above the chart
    caption_text = "<b>Overall Scenario Business Impact Analysis</b>"
    caption_paragraph = Paragraph(caption_text, center_style)
    story.append(caption_paragraph)  # Adding caption above the chart
    story.append(drawing)  # Add the drawing with the chart to the story
    story.append(Spacer(1, 20))

    raw_scenarios = context['raw_scenarios']
    scenario_count = len(raw_scenarios)  # Count the scenarios
    if scenario_count == 1:
        scenario_count_text = "One scenario was considered for this assessment. The scenario is described in the section below."
    else:
        scenario_count_text = f"{p.number_to_words(scenario_count).capitalize()} scenarios were considered for this assessment. The scenarios are described in the sections below."
    scenario_count_paragraph = Paragraph(scenario_count_text, styles['BodyText'])
    story.append(scenario_count_paragraph)
    story.append(Spacer(1, 12))

    story.append(PageBreak())

    # end of executive summary page
    scenarios_title = "Scenarios"
    scenarios_header = Paragraph(scenarios_title, styles['Heading2'])
    story.append(scenarios_header)
    story.append(Spacer(1, 12))
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER)
    raw_scenarios = context['raw_scenarios']
    first_scenario = True

    for index, scenario in enumerate(raw_scenarios, start=1):
        if index > 1:
            # Add a PageBreak before every new scenario after the first
            story.append(PageBreak())
            # Create a header for each scenario using its 'Scenario' attribute
        scenario_title = f"Scenario {index}: {scenario.ScenarioDescription}"
        scenario_header = Paragraph(scenario_title, styles['Heading3'])
        story.append(scenario_header)
        story.append(Spacer(1, 10))

        styles = getSampleStyleSheet()
        center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                      spaceAfter=6, fontSize=12)
        # Decode the base64 image
        image_data = base64.b64decode(scenario.bowtie)
        image = Image(BytesIO(image_data))  # Image object instantiated correctly without 'y'
        available_width = 5 * inch  # Assuming the page width is 8 inches, half of it is 4 inches
        aspect_ratio = image.drawHeight / image.drawWidth
        image.drawWidth = available_width
        image.drawHeight = available_width * aspect_ratio
        story.append(image)
        story.append(Spacer(1, 10))

        # Add the bar chart
        bar_chart = create_bar_chart(scenario)
        story.append(bar_chart)
        story.append(Spacer(1, 14))

        styles = getSampleStyleSheet()
        center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                      spaceAfter=6, fontSize=12)

        # Determine risk ratings
        bia = get_risk_rating(scenario.overall_bia)
        scenario_probability_rating = get_risk_rating(scenario.scenario_probability)

        # Create paragraphs with risk ratings
        bia_paragraph = Paragraph(f"Overall BIA: {bia} ({scenario.overall_bia}/10)",
                                  center_style)
        scenario_probability_paragraph = Paragraph(
            f"Scenario Probability: {scenario_probability_rating} ({scenario.scenario_probability}/10)", center_style)

        story.append(bia_paragraph)
        story.append(Spacer(1, 10))
        story.append(scenario_probability_paragraph)
        story.append(Spacer(1, 12))


        bullet_point_style = ParagraphStyle(name='Bullet', parent=styles['BodyText'], spaceBefore=3, spaceAfter=3,
                                            leftIndent=20)

        # Add the Scenario Consequences section
        consequences_title = Paragraph("Scenario Consequences", styles['Heading4'])
        story.append(consequences_title)
        story.append(Spacer(1, 10))

        consequences_paragraphs = parse_consequences(scenario.raw_consequences, bullet_point_style)
        for paragraph in consequences_paragraphs:
            story.append(paragraph)
            story.append(Spacer(1, 5))

        # Add the Estimated Damage section
        damage_title = Paragraph("Estimated Damage", styles['Heading4'])
        story.append(damage_title)
        story.append(Spacer(1, 10))

        damage_paragraph = Paragraph(scenario.scenario_damage, styles['BodyText'])
        story.append(damage_paragraph)
        story.append(Spacer(1, 12))

        styles = getSampleStyleSheet()
        center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                      spaceAfter=6, fontSize=12)
        table_cell_style = ParagraphStyle(name='TableCell', parent=styles['BodyText'], fontSize=10, spaceBefore=3,
                                          spaceAfter=3)
        action_items_title = Paragraph("Action Items", styles['Heading4'])
        story.append(action_items_title)
        story.append(Spacer(1, 10))
        # Parse executive summary into table data
        table_data = parse_executive_summary(scenario.executive_summary, table_cell_style)

        # Define the table
        col_widths = [0.5 * inch, 4 * inch, 2.5 * inch]  # Adjust column widths as needed
        exec_summary_table = Table(table_data, colWidths=col_widths)

        # Define table style
        exec_summary_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('LEFTPADDING', (0, 0), (-1, -1), 10),
            ('RIGHTPADDING', (0, 0), (-1, -1), 10),
            ('TOPPADDING', (0, 0), (-1, -1), 5),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 5)
        ]))

        # Add the table to the story
        story.append(exec_summary_table)
        story.append(Spacer(1, 12))
    doc.build(story, canvasmaker=FooterCanvas)

    pdf = buffer.getvalue()
    buffer.close()
    response.write(pdf)
    response = HttpResponse(pdf, content_type='application/pdf')
    response['Content-Disposition'] = 'inline; filename="CyberPHA.pdf"'
    return response


def get_raw_records(raw_id):
    raw_header = get_object_or_404(RAWorksheet, ID=raw_id)

    raw_scenarios = RAWorksheetScenario.objects.filter(RAWorksheetID=raw_id)

    field_label_mapping = {
        'SafetyScore': 'Safety',
        'ReputationScore': 'Reputation',
        'FinancialScore': 'Finance',
        'DataScore': 'Data',
        'SupplyChainScore': 'Supply Chain',
        'lifeScore': 'Danger',
        'productionScore': 'Operations',
        'environmentScore': 'Environment',
        'regulatoryScore': 'Compliance'
    }

    impact_fields = list(field_label_mapping.keys())
    impact_summary = {}

    # Aggregate the data and populate the impact_summary with user-friendly labels
    for field in impact_fields:
        avg_value = raw_scenarios.aggregate(avg_value=Avg(field))['avg_value']
        custom_label = field_label_mapping[field]
        impact_summary[custom_label] = avg_value if avg_value is not None else 0

    return {
        'raw_header': raw_header,
        'impact_summary': impact_summary,
        'raw_scenarios': raw_scenarios
    }
