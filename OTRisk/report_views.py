import base64
import json
import os
import re
from datetime import date
from io import BytesIO
from math import ceil

import inflect
import openai
from django.contrib.auth.decorators import login_required
from django.core import serializers
from django.db.models import Count, Avg, Func, Sum
from django.http import JsonResponse, HttpResponseRedirect, HttpResponseForbidden, HttpResponse
from django.shortcuts import get_object_or_404
from django.shortcuts import render
from django.urls import reverse
from reportlab.graphics.charts.axes import YValueAxis, XValueAxis, CategoryAxis, ValueAxis, XCategoryAxis
from reportlab.graphics.charts.barcharts import VerticalBarChart
from reportlab.graphics.charts.linecharts import HorizontalLineChart
from reportlab.graphics.charts.lineplots import LinePlot
from reportlab.graphics.shapes import Drawing, Rect, Image, String, Line
from reportlab.lib import colors
from reportlab.lib.colors import HexColor, black, lightgrey
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from reportlab.lib.pagesizes import letter
from reportlab.lib.sequencer import getSequencer
from reportlab.lib.styles import ParagraphStyle, ListStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.graphics.charts.textlabels import Label
from reportlab.lib.utils import ImageReader
from reportlab.pdfgen.canvas import Canvas
from reportlab.platypus import SimpleDocTemplate, PageBreak, Image, ListFlowable, ListItem
from reportlab.platypus import Table, TableStyle, Paragraph, Spacer

from OTRisk.models.Model_CyberPHA import tblCyberPHAHeader, tblCyberPHAScenario, vulnerability_analysis, \
    MitreControlAssessment, ScenarioConsequences, CyberSecurityInvestment, PHA_Observations, GlossaryTerm
from OTRisk.models.raw import RAActions
from OTRisk.models.raw import RAWorksheet, RAWorksheetScenario
from accounts.models import UserProfile
from OTRisk.models.model_assessment import SelfAssessment
from .pha_views import get_overall_control_effectiveness_score, get_api_key


class FooterCanvas(Canvas):
    def __init__(self, *args, **kwargs):
        Canvas.__init__(self, *args, **kwargs)
        self.pages = []

    def showPage(self):
        self.pages.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        page_count = len(self.pages)
        for page in self.pages:
            self.__dict__.update(page)
            self.draw_stripe()
            self.draw_footer(page_count)
            Canvas.showPage(self)
        Canvas.save(self)

    def draw_footer(self, page_count):
        self.saveState()
        width, height = letter
        self.setFont('Helvetica', 10)

        # Draw left-aligned text
        self.drawString(inch, 0.75 * inch, "Report generated by AnzenOT")

        # Draw page number right-aligned
        self.drawRightString(width - inch, 0.75 * inch, f"Page {self._pageNumber} of {page_count}")

        # Draw "Confidential" centered and in bold
        self.setFont('Helvetica-Bold', 10)  # Set font to bold for "Confidential"
        self.drawCentredString(width / 2, 0.75 * inch, "Confidential")

        self.restoreState()

    def draw_stripe(self):
        self.setFillColor("#65C8D0")
        self.rect(0, self._pagesize[1] - 10, self._pagesize[0], 10, fill=1, stroke=0)


def create_bar_chart(scenario):
    # Data for the bar chart
    scores = [
        ('Safety', scenario.SafetyScore),
        ('Reputation', scenario.ReputationScore),
        ('Finance', scenario.FinancialScore),
        ('Data', scenario.DataScore),
        ('Supply Chain', scenario.SupplyChainScore),
        ('Danger', scenario.lifeScore),
        ('Operations', scenario.productionScore),
        ('Environment', scenario.environmentScore),
        ('Compliance', scenario.regulatoryScore)
    ]

    # Sort scores from highest to lowest
    sorted_scores = sorted(scores, key=lambda x: x[1], reverse=True)
    category_names, data = zip(*sorted_scores)

    # Create the drawing
    drawing = Drawing(400, 200)

    # Create the bar chart
    bc = VerticalBarChart()
    bc.x = 50
    bc.y = 50
    bc.height = 125
    bc.width = 300
    bc.data = [data]  # Needs to be a list of lists
    bc.strokeColor = colors.black

    # Set the category axis
    bc.categoryAxis.categoryNames = category_names
    bc.categoryAxis.labels.boxAnchor = 'ne'
    bc.categoryAxis.labels.angle = 45
    bc.categoryAxis.labels.dy = -15

    # Set the value axis
    bc.valueAxis.valueMin = 0
    bc.valueAxis.valueMax = 10
    bc.valueAxis.valueStep = 1

    # Bar properties
    bc.bars[0].fillColor = colors.blue

    # Add title
    title = Label()
    title.setOrigin(200, 190)  # Position title above the chart
    title.setText("Scenario Business Impact Analysis")
    title.fontSize = 14
    title.textAnchor = 'middle'
    drawing.add(title)

    # Add the bar chart to the drawing
    drawing.add(bc)

    return drawing


def custom_label_formatter(value):
    if value >= 1000000:
        return f'${value / 1000000:.2f}m'
    elif value >= 1000:
        return f'${value / 1000:.1f}k'
    else:
        return f'${value:.0f}'


def add_cost_projection_chart(story, scenario):
    # Create caption
    styles = getSampleStyleSheet()
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                  spaceAfter=4, fontSize=10)
    caption = Paragraph("Scenario Cost Impact Projection", center_style)
    story.append(caption)
    story.append(Spacer(1, 12))

    # Parse cost projection values
    data = [float(x) for x in scenario.cost_projection.split('|')]

    # Determine the max value for setting the value axis increments
    max_value = max(data)
    if max_value < 100000:
        value_increment = 10000
        value_max = 100000
    else:
        value_increment = 50000
        value_max = ((max_value // 500000) + 1) * 500000

    # Creating a drawing for the chart
    width, height = 250, 200
    drawing = Drawing(width, height)
    chart = HorizontalLineChart()
    chart.x = 30
    chart.y = 30
    chart.height = 200
    chart.width = 200
    chart.data = [data]
    chart.lines[0].strokeColor = colors.orange

    # Setting the categories
    categories = ['Month 1', 'Month 2', 'Month 3', 'Month 4', 'Month 5', 'Month 6',
                  'Month 7', 'Month 8', 'Month 9', 'Month 10', 'Month 11', 'Month 12']
    chart.categoryAxis.categoryNames = categories
    chart.categoryAxis.labels.angle = 45
    chart.categoryAxis.labels.fontSize = 8
    chart.categoryAxis.labels.dy = -10
    chart.categoryAxis.labels.dx = -10

    # Value axis settings
    chart.valueAxis.valueMin = 0
    chart.valueAxis.valueMax = value_max
    chart.valueAxis.valueStep = value_increment
    chart.valueAxis.labelTextFormat = custom_label_formatter

    # Adding grid lines
    chart.valueAxis.gridStrokeColor = colors.white
    chart.categoryAxis.gridStrokeColor = colors.white

    # Add the chart to the drawing
    drawing.add(chart)

    # Parse cost justification text into bullet points
    cost_justification = scenario.cost_justification
    bullet_points = [ListItem(Paragraph(f"{sentence.strip()}.", styles['BodyText']), leftIndent=10) for sentence in
                     cost_justification.split('.') if sentence]

    # Create a ListFlowable for bullet points
    bullet_list = ListFlowable(bullet_points, bulletType='bullet')

    # Create table with chart and bullet points
    table = Table([[drawing, bullet_list]], colWidths=[3.25 * inch, 3.25 * inch])

    # Add table styling for vertical alignment and spacing between columns
    table.setStyle(TableStyle([
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('LEFTPADDING', (1, 0), (1, 0), 15)
    ]))

    # Add table to story
    story.append(table)
    story.append(Spacer(1, 20))


def add_impact_chart(story, scenario):
    styles = getSampleStyleSheet()
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                  spaceAfter=4, fontSize=10)
    # Create caption
    caption = Paragraph("Scenario Business Impact Analysis", center_style)
    story.append(caption)
    story.append(Spacer(1, 5))
    impact_values = [
        scenario.impactSafety, scenario.impactData, scenario.impactDanger,
        scenario.impactSupply, scenario.impactProduction, scenario.impactFinance,
        scenario.impactEnvironment, scenario.impactSupply
    ]

    # Creating a drawing for the chart
    width, height = 350, 180
    drawing = Drawing(width, height)
    chart = VerticalBarChart()
    chart.x = 50
    chart.y = 75
    chart.height = 100
    chart.width = 350
    chart.data = [impact_values]
    chart.valueAxis.valueMin = 0
    chart.valueAxis.valueMax = 11  # Set max value slightly higher than the max data value

    # Add category names
    chart.categoryAxis.categoryNames = [
        'Safety', 'Data', 'Danger', 'Supply', 'Production', 'Finance', 'Environment', 'Supply'
    ]
    greyscale_colors = [colors.grey, colors.lightgrey, colors.darkgrey]
    for i in range(len(chart.data)):
        chart.bars[i].fillColor = greyscale_colors[i % len(greyscale_colors)]
        chart.bars[i].strokeColor = colors.black
        chart.bars[i].strokeWidth = 0.5

    # Chart styles
    chart.categoryAxis.labels.boxAnchor = 'n'  # North alignment for category labels
    chart.categoryAxis.labels.angle = 45  # Optional: tilt the labels for better fit
    chart.categoryAxis.labels.fontSize = 8
    chart.categoryAxis.labels.dy = -10
    chart.categoryAxis.labels.dx = -10

    drawing.add(chart)
    story.append(drawing)
    story.append(Spacer(1, 20))


def add_risk_rationale_table(story, scenario):
    styles = getSampleStyleSheet()
    normal_style = styles['BodyText']
    small_style = ParagraphStyle('small', parent=styles['BodyText'], fontSize=8)

    # Create caption row
    caption = Paragraph("Risk Rationale",
                        ParagraphStyle(name='caption', fontSize=10, alignment=TA_CENTER, backColor=colors.lightgrey,
                                       textColor=colors.black, spaceAfter=10, borderPadding=5,
                                       borderColor=colors.darkgrey, borderWidth=0, borderBottom=1))

    # Parse risk rationale text into bullet points
    risk_rationale = scenario.risk_rationale.replace(" - ", "• ")
    bullet_points = [f"{sentence.strip()}" for sentence in risk_rationale.split('\n') if sentence.strip()]

    # Split bullet points into two columns
    half = (len(bullet_points) + 1) // 2
    col1 = bullet_points[:half]
    col2 = bullet_points[half:]

    # Create the table with caption row and two columns of bullet points
    table_data = [
        [caption, ''],
        [Paragraph('<br/><br/>'.join(col1), small_style), Paragraph('<br/><br/>'.join(col2), small_style)]
    ]

    table = Table(table_data, colWidths=[3.25 * inch, 3.25 * inch])

    # Add table styling for padding and borders
    table.setStyle(TableStyle([
        ('SPAN', (0, 0), (-1, 0)),
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('LINEBELOW', (0, 0), (-1, 0), 1, colors.darkgrey),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
        ('TOPPADDING', (0, 1), (-1, -1), 10),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('LEFTPADDING', (0, 1), (0, -1), 12),
        ('LEFTPADDING', (1, 1), (1, -1), 12),
    ]))

    # Add table to story
    story.append(table)
    story.append(Spacer(1, 20))


def pdf_print_compliance_table(story, scenario, styles):

    compliance_entries = scenario.compliance_map.split(" || ")

    compliance_table_data = [['Issue', 'Regulation']]  # Initialize table data with headers

    for entry in compliance_entries:
        entry = entry.strip()
        if entry:  # Ensure entry is not empty
            parts = entry.split(" > ")
            if len(parts) == 3:
                framework, rule, _ = parts  # Ignore the third part (URL)
                compliance_table_data.append([Paragraph(framework.strip(), styles['BodyText']),
                                              Paragraph(rule.strip(), styles['BodyText'])])

    if len(compliance_table_data) > 1:  # Ensure there's data beyond the header row
        col_widths = [0.50 * 450, 0.50 * 450]
        compliance_table = Table(compliance_table_data, colWidths=col_widths, hAlign='LEFT')
        compliance_table.setStyle(TableStyle([
            ('BOX', (0, 0), (-1, 0), 0, colors.white),
            ('LINEBEFORE', (1, 1), (-1, -1), 0, colors.white),
            ('LINEAFTER', (0, 0), (-1, 0), 0, colors.white),
            ('TOPPADDING', (0, 0), (-1, -1), 5),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
            ('ROWBACKGROUNDS', (0, 0), (-1, 0), [colors.lightgrey]),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('LINEABOVE', (0, 1), (-1, -1), 1, colors.HexColor('#65C8D0'), None, (2, 2)),
            ('LINEBELOW', (0, 0), (-1, -2), 1, colors.HexColor('#65C8D0'), None, (2, 2)),
        ]))

        caption_text = "Compliance Map"
        caption_paragraph = Paragraph(caption_text, styles['Title'])
        story.append(caption_paragraph)
        story.append(Spacer(1, 10))

        # Add the table to the story
        story.append(compliance_table)
        story.append(Spacer(1, 20))


def pdf_print_safety_profile(story, safety_profile_data, styles):
    safety_profile = safety_profile_data.get('safetyProfile', [])

    table_text_style = ParagraphStyle('TableText', parent=styles['BodyText'], fontName='Helvetica', fontSize=8)

    # Initialize table data with headers
    table_data = [['Hazard', 'Details']]

    # Process each safety profile entry
    for entry in safety_profile:
        hazard = entry.get('hazard', '')
        details = entry.get('details', '')
        table_data.append([Paragraph(hazard, table_text_style), Paragraph(details, table_text_style)])

    if len(table_data) > 1:  # Ensure there's data beyond the header row
        col_widths = [0.30 * 450, 0.70 * 450]
        safety_profile_table = Table(table_data, colWidths=col_widths, hAlign='LEFT')
        safety_profile_table.setStyle(TableStyle([
            ('BOX', (0, 0), (-1, 0), 0, colors.white),
            ('LINEBEFORE', (1, 1), (-1, -1), 0, colors.white),
            ('LINEAFTER', (0, 0), (-1, 0), 0, colors.white),
            ('TOPPADDING', (0, 0), (-1, -1), 5),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
            ('ROWBACKGROUNDS', (0, 0), (-1, 0), [colors.lightgrey]),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('LINEABOVE', (0, 1), (-1, -1), 1, colors.HexColor('#65C8D0'), None, (2, 2)),
            ('LINEBELOW', (0, 0), (-1, -2), 1, colors.HexColor('#65C8D0'), None, (2, 2)),
        ]))

        # Add the table to the story
        story.append(safety_profile_table)
        story.append(Spacer(1, 20))

    # Add the narrative paragraph below the table
    narrative = safety_profile_data.get('narrative', '')
    narrative_paragraph = Paragraph(narrative, table_text_style)
    story.append(narrative_paragraph)
    story.append(Spacer(1, 20))


def pdf_print_chemical_profile(story, chemical_profile_data, styles):
    chemicals = chemical_profile_data.get('chemicals', [])

    # Create a custom ParagraphStyle for the table content
    table_text_style = ParagraphStyle('TableText', parent=styles['BodyText'], fontName='Helvetica', fontSize=8)

    # Initialize table data with headers
    table_data = [['Chemical', 'Toxic', 'Flammable', 'State']]

    # Process each chemical profile entry
    for entry in chemicals:
        chemical_name = entry.get('chemicalName', '')
        toxic = 'Yes' if entry.get('toxic', False) else 'No'
        flammable = 'Yes' if entry.get('flammable', False) else 'No'
        state = entry.get('state', '')
        table_data.append([Paragraph(chemical_name, table_text_style),
                           Paragraph(toxic, table_text_style),
                           Paragraph(flammable, table_text_style),
                           Paragraph(state, table_text_style)])

    if len(table_data) > 1:  # Ensure there's data beyond the header row
        col_widths = [0.40 * 450, 0.20 * 450, 0.20 * 450, 0.20 * 450]
        chemical_profile_table = Table(table_data, colWidths=col_widths, hAlign='LEFT')
        chemical_profile_table.setStyle(TableStyle([
            ('BOX', (0, 0), (-1, 0), 0, colors.white),
            ('LINEBEFORE', (1, 1), (-1, -1), 0, colors.white),
            ('LINEAFTER', (0, 0), (-1, 0), 0, colors.white),
            ('TOPPADDING', (0, 0), (-1, -1), 5),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
            ('ROWBACKGROUNDS', (0, 0), (-1, 0), [colors.lightgrey]),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('LINEABOVE', (0, 1), (-1, -1), 1, colors.HexColor('#65C8D0'), None, (2, 2)),
            ('LINEBELOW', (0, 0), (-1, -2), 1, colors.HexColor('#65C8D0'), None, (2, 2)),
        ]))

        # Add the table to the story
        story.append(chemical_profile_table)
        story.append(Spacer(1, 20))

    # Add the narrative paragraph below the table
    narrative = chemical_profile_data.get('narrative', '')
    narrative_paragraph = Paragraph(narrative, table_text_style)
    story.append(narrative_paragraph)
    story.append(Spacer(1, 20))


def pdf_print_glossary(story, styles):
    glossary_terms = GlossaryTerm.objects.all().order_by('term')

    # Create a custom ParagraphStyle for the table content
    table_text_style = ParagraphStyle('TableText', parent=styles['BodyText'], fontName='Helvetica', fontSize=8)

    table_data = []

    # Process each glossary term
    for term in glossary_terms:
        term_paragraph = Paragraph(f"<b>{term.term}</b>", table_text_style)
        definition_paragraph = Paragraph(term.definition, table_text_style)
        table_data.append([term_paragraph, definition_paragraph])

    if table_data:  # Ensure there's data to display
        glossary_table = Table(table_data, colWidths=[0.25 * 450, 0.75 * 450], hAlign='LEFT')
        glossary_table.setStyle(TableStyle([
            ('BOX', (0, 0), (-1, -1), 0, colors.white),  # No borders
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('LEFTPADDING', (0, 0), (-1, -1), 0),
            ('RIGHTPADDING', (0, 0), (-1, -1), 0),
        ]))

        caption_text = "Glossary"
        caption_paragraph = Paragraph(caption_text, styles['Title'])
        story.append(PageBreak())  # Add a page break before the glossary
        story.append(caption_paragraph)
        story.append(Spacer(1, 10))

        # Add the table to the story
        story.append(glossary_table)
        story.append(Spacer(1, 20))
@login_required()
def pha_reports(request, cyber_pha_header_id):
    cyber_pha_header = get_object_or_404(tblCyberPHAHeader, ID=cyber_pha_header_id)
    user_profile = request.user.userprofile
    organization = user_profile.organization
    # Get the ID of the user who created the CyberPHA
    creator_user_id = cyber_pha_header.UserID

    # Get the organization ID of the user who created the CyberPHA
    creator_organization_id = UserProfile.objects.filter(user_id=creator_user_id).values_list('organization_id',
                                                                                              flat=True).first()

    # Get the current user's organization ID
    current_user_organization_id = request.user.userprofile.organization_id

    # Check if the current user is the creator or belongs to the same organization
    if str(request.user.id) != creator_user_id and current_user_organization_id != creator_organization_id:
        # Optionally, instead of logging out, you might want to redirect to a forbidden page or show an error message
        return HttpResponseRedirect(reverse('logout'))

    # Get the related records using the function we defined earlier
    context = get_pha_records(cyber_pha_header_id)

    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'inline; filename="report.pdf"'

    buffer = BytesIO()

    # Create a canvas and a PDF document.
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    story = []

    styles = getSampleStyleSheet()

    def onFirstPage(canvas, doc):
        canvas.saveState()
        canvas.setTitle("CyberPHA Report")
        width, height = letter

        # Assuming the logo is stored correctly in your static directory
        logo_path = os.path.join('static/images', '65C8D0 - Light Blue-2.png')
        logo_y_position = height / 1.4
        canvas.drawImage(logo_path, width / 2.1 - 70, logo_y_position, 175, 150, mask='auto')  # Center the logo

        # Draw 'Report for' and 'Prepared for' text
        canvas.setFont('Helvetica-Bold', 12)
        text_y_position = logo_y_position - 30  # Position text directly below the logo
        canvas.drawCentredString(width / 2, text_y_position, f"Report for: {cyber_pha_header.FacilityName}")
        text_y_position -= 40  # Adjust for next line of text
        canvas.drawCentredString(width / 2, text_y_position, f"Prepared for: {organization.name}")
        current_date = date.today().strftime("%B %d, %Y")
        text_y_position -= 50  # Adjust for next line of text
        canvas.setFont('Helvetica', 12)
        canvas.drawCentredString(width / 2, text_y_position, current_date)
        canvas.restoreState()

    doc.build(story, onFirstPage=onFirstPage)
    story.append(PageBreak())
    custom_bold_style = ParagraphStyle('CustomBold', parent=styles['BodyText'], fontName='Helvetica-Bold')
    body_text_style = ParagraphStyle('BodyTextWithMarkup', parent=styles['BodyText'], fontName='Helvetica',
                                     allowMarkup=True)

    # Add the header for the second page
    header_texts = ['Executive Summary', 'Scenarios', 'Summary', 'Appendix']
    header_html = '<para alignment="center">'
    for text in header_texts:
        if text == 'Executive Summary':
            header_html += f'<u color="#65C8D0">{text}</u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
        else:
            header_html += f'{text}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
    header_html += '</para>'

    header_paragraph = Paragraph(header_html, custom_bold_style)
    # Add header paragraph close to the top
    story.append(Spacer(1, -30))
    story.append(header_paragraph)
    story.append(Spacer(1, 20))
    # Add Executive Summary section
    executive_summary_title = "Executive Summary"
    executive_summary = Paragraph(executive_summary_title, styles['Heading2'])
    story.append(executive_summary)
    story.append(Spacer(1, 12))

    executive_summary_text = f"This is a report for a CyberPHA risk assessment conducted at {cyber_pha_header.facility.name}, a {cyber_pha_header.facility.type.FacilityType} at {cyber_pha_header.facility.address}. The assessment was conducted between {cyber_pha_header.AssessmentStartDate} and {cyber_pha_header.AssessmentEndDate}. The assessment leader was {cyber_pha_header.PHALeader}"
    summary_paragraph = Paragraph(executive_summary_text, styles['BodyText'])
    story.append(summary_paragraph)
    story.append(Spacer(1, 12))
    cyber_pha_scenarios = context['cyber_pha_scenarios']
    scenario_count = len(cyber_pha_scenarios)  # Count the scenarios
    if scenario_count == 1:
        scenario_count_text = "One scenario was considered for this assessment. The scenario is described in the section below."
    else:
        scenario_count_text = f"{scenario_count} scenarios were considered for this assessment. The scenarios are described in the sections below."

    scenario_count_paragraph = Paragraph(scenario_count_text, styles['BodyText'])
    story.append(scenario_count_paragraph)
    story.append(Spacer(1, 12))

    # Determine the likelihood description based on the overall_likelihood value

    styles = getSampleStyleSheet()
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=1, spaceBefore=6, spaceAfter=6,
                                  fontSize=10)

    # Prepare data and labels for the bar chart
    impact_data = context['impact_summary']
    data = [list(impact_data.values())]  # Data for the chart
    categories = list(impact_data.keys())  # Category labels

    # Creating a drawing for the chart
    width, height = 450, 250
    drawing = Drawing(width, height)
    chart = VerticalBarChart()
    chart.x = 50
    chart.y = 75
    chart.height = 125
    chart.width = 300
    chart.data = data
    chart.categoryAxis.categoryNames = categories
    chart.valueAxis.valueMin = 0
    chart.valueAxis.valueMax = max(data[0]) + 1  # Set max value slightly higher than the max data value

    greyscale_colors = [colors.grey, colors.lightgrey, colors.darkgrey]
    for i in range(len(chart.data)):
        chart.bars[i].fillColor = greyscale_colors[i % len(greyscale_colors)]
        chart.bars[i].strokeColor = colors.black
        chart.bars[i].strokeWidth = 0.5

    # Chart styles
    chart.categoryAxis.labels.boxAnchor = 'n'  # North alignment for category labels
    chart.categoryAxis.labels.angle = 45  # Optional: tilt the labels for better fit
    chart.categoryAxis.labels.fontSize = 8
    chart.categoryAxis.labels.dy = -10
    chart.categoryAxis.labels.dx = -10

    # Add the chart to the drawing
    drawing.add(chart)

    # Create a table with the chart and caption
    caption_text = "<b>Overall Scenario Business Impact Analysis</b>"
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=1, spaceBefore=6, spaceAfter=6,
                                  fontSize=10)
    caption_paragraph = Paragraph(caption_text, center_style)

    # Adjusting the column width to bring the caption closer to the chart
    chart_and_caption_table = Table(
        [[caption_paragraph], [drawing]],
        colWidths=[width],  # Adjust the width to center the chart
        rowHeights=[None, height]
    )

    # Style the table to align the caption to the left and position it
    chart_and_caption_table.setStyle(TableStyle([
        ('ALIGN', (0, 0), (0, 0), 'CENTER'),  # Center align the caption
        ('ALIGN', (0, 1), (0, 1), 'CENTER'),  # Center align the chart
        ('VALIGN', (0, 1), (0, 1), 'TOP'),  # Align the chart to the top
        ('TOPPADDING', (0, 1), (0, 1), 0),  # Add padding above the chart
    ]))
    # Add the table to the story
    story.append(chart_and_caption_table)
    story.append(Spacer(1, 5))
    pha_score = cyber_pha_header.facility.pha_score
    overall_likelihood = context['overall_likelihood']
    if 0 <= overall_likelihood <= 25:
        likelihood_description = "Very Low"
    elif 26 <= overall_likelihood <= 35:
        likelihood_description = "Low"
    elif 36 <= overall_likelihood <= 55:
        likelihood_description = "Medium"
    elif 56 <= overall_likelihood <= 70:
        likelihood_description = "Medium to High"
    elif 71 <= overall_likelihood <= 90:
        likelihood_description = "High"
    elif 91 <= overall_likelihood <= 100:
        likelihood_description = "Very High"
    else:
        likelihood_description = "Unknown"  # Just in case the value is out of expected range

    styles = getSampleStyleSheet()
    caption_style = ParagraphStyle(name='Caption', parent=styles['BodyText'], alignment=TA_CENTER, fontSize=10,
                                   spaceBefore=5)
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                  spaceAfter=4, fontSize=10)

    # Define the table data for risk likelihood, control score, and PHA score
    risk_likelihood_heading = Paragraph("<b>Risk Likelihood</b>", center_style)
    risk_likelihood_value = Paragraph(f"{overall_likelihood}%", center_style)
    control_score_heading = Paragraph("<b>Control Score</b>", center_style)
    control_score_value = Paragraph(f"{cyber_pha_header.last_assessment_score}/100", center_style)
    pha_score_heading = Paragraph("<b>PHA Score</b>", center_style)
    pha_score_value = Paragraph(f"{pha_score}/100", center_style)

    # Create the table data
    data = [
        [risk_likelihood_heading, control_score_heading, pha_score_heading],
        [risk_likelihood_value, control_score_value, pha_score_value]
    ]

    # Create the table
    table = Table(data, colWidths=[None, None, None], rowHeights=[30, 30])

    # Style the table
    table.setStyle(TableStyle([
        # Header row style
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
        ('LINEBELOW', (0, 0), (-1, 0), 1, colors.darkgrey),
        ('TOPPADDING', (0, 0), (-1, 0), 5),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 5),
        ('LEFTPADDING', (0, 0), (-1, 0), 10),
        ('RIGHTPADDING', (0, 0), (-1, 0), 10),

        # Remove borders from header row except bottom
        ('LINEABOVE', (0, 0), (-1, 0), 0, colors.white),
        ('LINEBEFORE', (0, 0), (0, 0), 0, colors.white),
        ('LINEAFTER', (-1, 0), (-1, 0), 0, colors.white),

        # Data row style
        ('BOTTOMPADDING', (0, 1), (-1, 1), 5),
        ('TOPPADDING', (0, 1), (-1, 1), 5),
        ('LINEBELOW', (0, 1), (-1, 1), 1, colors.darkgrey),
        ('LEFTPADDING', (0, 1), (-1, 1), 10),
        ('RIGHTPADDING', (0, 1), (-1, 1), 10),

        # Remove other borders from data row
        ('LINEABOVE', (0, 1), (-1, 1), 0, colors.white),
        ('LINEBEFORE', (0, 1), (0, 1), 0, colors.white),
        ('LINEAFTER', (-1, 1), (-1, 1), 0, colors.white),

        # Center align all cells
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE')
    ]))

    caption_style = ParagraphStyle(name='Caption', parent=styles['BodyText'], alignment=TA_CENTER, fontSize=10,
                                   spaceBefore=5)
    caption_text = "Key Indicators"
    caption_paragraph = Paragraph(caption_text, caption_style)
    styles = getSampleStyleSheet()
    caption_style = ParagraphStyle(name='Caption', parent=styles['BodyText'], alignment=TA_CENTER, fontSize=10,
                                   spaceBefore=5)
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                  spaceAfter=4, fontSize=10)
    # Add the table to the story
    story.append(caption_paragraph)
    story.append(table)
    story.append(Spacer(1, 20))

    caption_style = ParagraphStyle(name='Caption', parent=styles['BodyText'], alignment=TA_CENTER, fontSize=10,
                                   spaceBefore=5)
    caption_text = "Overall cost impact (all scenarios)"
    caption_paragraph = Paragraph(caption_text, caption_style)

    styles = getSampleStyleSheet()
    caption_style = ParagraphStyle(name='Caption', parent=styles['BodyText'], alignment=TA_CENTER, fontSize=10,
                                   spaceBefore=5)
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                  spaceAfter=4, fontSize=10)

    # Define the table data
    data = [
        [
            Paragraph("<b>Best Case</b>", center_style),
            Paragraph("<b>Most Likely</b>", center_style),
            Paragraph("<b>Worst Case</b>", center_style)
        ],
        [
            Paragraph(f"{context['total_cost_impact_low']}", center_style),
            Paragraph(f"{context['total_cost_impact']}", center_style),
            Paragraph(f"{context['total_cost_impact_high']}", center_style)
        ]
    ]

    # Create the table
    table = Table(data, colWidths=[None, None, None], rowHeights=[30, 30])

    # Style the table
    table.setStyle(TableStyle([
        # Header row style
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
        ('LINEBELOW', (0, 0), (-1, 0), 1, colors.darkgrey),
        ('TOPPADDING', (0, 0), (-1, 0), 5),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 5),
        ('LEFTPADDING', (0, 0), (-1, 0), 10),
        ('RIGHTPADDING', (0, 0), (-1, 0), 10),

        # Remove borders from header row except bottom
        ('LINEABOVE', (0, 0), (-1, 0), 0, colors.white),
        ('LINEBEFORE', (0, 0), (0, 0), 0, colors.white),
        ('LINEAFTER', (-1, 0), (-1, 0), 0, colors.white),

        # Data row style
        ('BOTTOMPADDING', (0, 1), (-1, 1), 5),
        ('TOPPADDING', (0, 1), (-1, 1), 5),
        ('LINEBELOW', (0, 1), (-1, 1), 1, colors.darkgrey),
        ('LEFTPADDING', (0, 1), (-1, 1), 10),
        ('RIGHTPADDING', (0, 1), (-1, 1), 10),

        # Remove other borders from data row
        ('LINEABOVE', (0, 1), (-1, 1), 0, colors.white),
        ('LINEBEFORE', (0, 1), (0, 1), 0, colors.white),
        ('LINEAFTER', (-1, 1), (-1, 1), 0, colors.white),

        # Center align all cells
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE')
    ]))

    # Add the caption and table to the story
    story.append(caption_paragraph)
    story.append(table)
    story.append(Spacer(1, 12))

    story.append(PageBreak())
    # page 2 of executive summary
    custom_bold_style = ParagraphStyle('CustomBold', parent=styles['BodyText'], fontName='Helvetica-Bold')
    body_text_style = ParagraphStyle('BodyTextWithMarkup', parent=styles['BodyText'], fontName='Helvetica',
                                     allowMarkup=True)

    # Add the header for the second page
    header_texts = ['Executive Summary', 'Scenarios', 'Summary', 'Appendix']
    header_html = '<para alignment="center">'
    for text in header_texts:
        if text == 'Executive Summary':
            header_html += f'<u color="#65C8D0">{text}</u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
        else:
            header_html += f'{text}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
    header_html += '</para>'

    header_paragraph = Paragraph(header_html, custom_bold_style)
    # Add header paragraph close to the top
    story.append(Spacer(1, -30))
    story.append(header_paragraph)
    # end of header paragraph

    # start of main content for page 2 of executive summary
    subheading_style = ParagraphStyle(name='Subheading', parent=styles['Heading2'], fontName='Helvetica-Bold',
                                      fontSize=14, spaceBefore=16, spaceAfter=6)
    body_text_style = ParagraphStyle(name='BodyText', parent=styles['BodyText'], fontName='Helvetica', fontSize=12,
                                     spaceBefore=6, spaceAfter=6)

    # Fetch the framework value
    try:
        self_assessment = SelfAssessment.objects.get(pk=cyber_pha_header.assessment)

        framework_name = self_assessment.framework.name
    except SelfAssessment.DoesNotExist:
        framework_name = "No assessment saved"

    # Create the subheading and body text paragraphs
    subheading_paragraph = Paragraph("Control Assessment", subheading_style)
    body_text_paragraph = Paragraph(f"A control assessment was performed against: {framework_name}", body_text_style)

    # Add the paragraphs to the story
    story.append(subheading_paragraph)
    story.append(Spacer(1, 12))
    story.append(body_text_paragraph)
    story.append(Spacer(1, 12))
    assessment_summary = cyber_pha_header.last_assessment_summary
    bullet_points = assessment_summary.split('. ')

    # Create the bullet list paragraphs
    for point in bullet_points:
        if point.strip():  # Check if the point is not empty
            bullet_paragraph = Paragraph(f"• {point.strip()}.", body_text_style)
            story.append(bullet_paragraph)
            story.append(Spacer(1, 6))  # Add some space between bullet points

    story.append(PageBreak())
    # end of page 2 of executive summary
    header_texts = ['Executive Summary', 'Scenarios', 'Summary', 'Appendix']
    header_html = '<para alignment="center">'
    for text in header_texts:
        if text == 'Scenarios':
            header_html += f'<u color="#65C8D0">{text}</u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
        else:
            header_html += f'{text}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
    header_html += '</para>'

    header_paragraph = Paragraph(header_html, custom_bold_style)
    # Add header paragraph close to the top
    story.append(Spacer(1, -30))
    story.append(header_paragraph)
    story.append(Spacer(1, 12))
    scenarios_title = "Scenarios"
    scenarios_header = Paragraph(scenarios_title, styles['Heading2'])
    story.append(scenarios_header)
    story.append(Spacer(1, 12))
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER)

    # Get the list of scenarios from the context
    cyber_pha_scenarios = context['cyber_pha_scenarios']
    scenario_text_style = ParagraphStyle(name='ScenarioText', parent=styles['BodyText'], alignment=TA_LEFT,
                                         spaceBefore=6, spaceAfter=6)
    first_scenario = True
    # Iterate through each scenario in the list
    for index, scenario in enumerate(cyber_pha_scenarios, start=1):
        if index > 0:

            # Create a header for each scenario using its 'Scenario' attribute
            scenario_title = f"Scenario: {index}"
            scenario_header = Paragraph(scenario_title, styles['Heading3'])
            story.append(scenario_header)
            story.append(Spacer(1, 10))

            # Split the scenario text into sentences
            scenario_sentences = scenario.Scenario.split('. ')
            formatted_scenario_text = ""
            for sentence in scenario_sentences:
                if sentence.strip():
                    formatted_scenario_text += f"{sentence.strip()}.\n"

            # Create the scenario paragraph
            scenario_paragraph = Paragraph(formatted_scenario_text, scenario_text_style)

            # Create a table to enclose the scenario paragraph with a border
            scenario_table = Table(
                [[scenario_paragraph]],
                colWidths=[0.8 * letter[0]]  # 50% of the page width
            )
            scenario_table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('BOX', (0, 0), (-1, -1), 1, lightgrey),
                ('LEFTPADDING', (0, 0), (-1, -1), 10),
                ('RIGHTPADDING', (0, 0), (-1, -1), 10),
                ('TOPPADDING', (0, 0), (-1, -1), 10),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 10),
            ]))

            # Add the scenario table to the story
            story.append(scenario_table)
            story.append(Spacer(1, 20))

            observations = scenario.observations.all() if hasattr(scenario, 'observations') else []

            styles = getSampleStyleSheet()
            center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=2,
                                          spaceAfter=6, fontSize=9)

            data = [
                [
                    Paragraph("<b>Residual Risk</b>", center_style),
                    Paragraph("<b>Probability</b>", center_style),
                    Paragraph("<b>Recommendation</b>", center_style)
                ],
                [
                    Paragraph(f"{scenario.RRa}", center_style),
                    Paragraph(f"{scenario.probability}", center_style),
                    Paragraph(f"{scenario.risk_recommendation}", center_style)
                ]
                    ]

            table = Table(data, colWidths=[None, None, None], rowHeights=[30, 30])
            # Style the table
            table.setStyle(TableStyle([
                # Header row style
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
                ('LINEBELOW', (0, 0), (-1, 0), 1, colors.darkgrey),
                ('TOPPADDING', (0, 0), (-1, 0), 5),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 5),
                ('LEFTPADDING', (0, 0), (-1, 0), 10),
                ('RIGHTPADDING', (0, 0), (-1, 0), 10),

                # Remove borders from header row except bottom
                ('LINEABOVE', (0, 0), (-1, 0), 0, colors.white),
                ('LINEBEFORE', (0, 0), (0, 0), 0, colors.white),
                ('LINEAFTER', (-1, 0), (-1, 0), 0, colors.white),

                # Data row style
                ('BOTTOMPADDING', (0, 1), (-1, 1), 5),
                ('TOPPADDING', (0, 1), (-1, 1), 5),
                ('LINEBELOW', (0, 1), (-1, 1), 1, colors.darkgrey),
                ('LEFTPADDING', (0, 1), (-1, 1), 10),
                ('RIGHTPADDING', (0, 1), (-1, 1), 10),

                # Remove other borders from data row
                ('LINEABOVE', (0, 1), (-1, 1), 0, colors.white),
                ('LINEBEFORE', (0, 1), (0, 1), 0, colors.white),
                ('LINEAFTER', (-1, 1), (-1, 1), 0, colors.white),

                # Center align all cells
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE')
            ]))
            # Add the table to the story
            story.append(table)
            story.append(Spacer(1, 20))
            # End residual risk table

            add_risk_rationale_table(story, scenario)
            story.append(PageBreak())
            custom_bold_style = ParagraphStyle('CustomBold', parent=styles['BodyText'], fontName='Helvetica-Bold')
            body_text_style = ParagraphStyle('BodyTextWithMarkup', parent=styles['BodyText'], fontName='Helvetica',
                                             allowMarkup=True)

            # Add the header for the second page
            header_texts = ['Executive Summary', 'Scenarios', 'Summary', 'Appendix']
            header_html = '<para alignment="center">'
            for text in header_texts:
                if text == 'Executive Summary':
                    header_html += f'<u color="#65C8D0">{text}</u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
                else:
                    header_html += f'{text}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
            header_html += '</para>'

            header_paragraph = Paragraph(header_html, custom_bold_style)
            # Add header paragraph close to the top
            story.append(Spacer(1, -30))
            story.append(header_paragraph)
            # start scenario cost impact
            caption_style = ParagraphStyle(name='Caption', parent=styles['BodyText'], alignment=TA_CENTER, fontSize=10,
                                           spaceBefore=15)
            caption_text = "Scenario cost impact"
            caption_paragraph = Paragraph(caption_text, caption_style)

            styles = getSampleStyleSheet()
            caption_style = ParagraphStyle(name='Caption', parent=styles['BodyText'], alignment=TA_CENTER, fontSize=10,
                                           spaceBefore=5)
            center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                          spaceAfter=4, fontSize=10)

            best_case = format_currency(scenario.sle_low)
            mid_case = format_currency(scenario.sle_low)
            worst_case = format_currency(scenario.sle_high)
            # Define the table data
            data = [
                [
                    Paragraph("<b>Best Case</b>", center_style),
                    Paragraph("<b>Most Likely</b>", center_style),
                    Paragraph("<b>Worst Case</b>", center_style)
                ],
                [
                    Paragraph(f"{best_case}", center_style),
                    Paragraph(f"{mid_case}", center_style),
                    Paragraph(f"{worst_case}", center_style)
                ]
            ]

            table = Table(data, colWidths=[None, None, None], rowHeights=[30, 30])

            table.setStyle(TableStyle([
                # Header row style
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
                ('LINEBELOW', (0, 0), (-1, 0), 1, colors.darkgrey),
                ('TOPPADDING', (0, 0), (-1, 0), 5),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 5),
                ('LEFTPADDING', (0, 0), (-1, 0), 10),
                ('RIGHTPADDING', (0, 0), (-1, 0), 10),

                # Remove borders from header row except bottom
                ('LINEABOVE', (0, 0), (-1, 0), 0, colors.white),
                ('LINEBEFORE', (0, 0), (0, 0), 0, colors.white),
                ('LINEAFTER', (-1, 0), (-1, 0), 0, colors.white),

                # Data row style
                ('BOTTOMPADDING', (0, 1), (-1, 1), 5),
                ('TOPPADDING', (0, 1), (-1, 1), 5),
                ('LINEBELOW', (0, 1), (-1, 1), 1, colors.darkgrey),
                ('LEFTPADDING', (0, 1), (-1, 1), 10),
                ('RIGHTPADDING', (0, 1), (-1, 1), 10),

                # Remove other borders from data row
                ('LINEABOVE', (0, 1), (-1, 1), 0, colors.white),
                ('LINEBEFORE', (0, 1), (0, 1), 0, colors.white),
                ('LINEAFTER', (-1, 1), (-1, 1), 0, colors.white),

                # Center align all cells
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE')
            ]))

            story.append(caption_paragraph)
            story.append(table)
            story.append(Spacer(1, 12))
            # end cost impact

            story.append(Spacer(1, 20))
            # add cost projection

            add_cost_projection_chart(story, scenario)
            # end cost projection
            story.append(PageBreak())
            custom_bold_style = ParagraphStyle('CustomBold', parent=styles['BodyText'], fontName='Helvetica-Bold')
            body_text_style = ParagraphStyle('BodyTextWithMarkup', parent=styles['BodyText'], fontName='Helvetica',
                                             allowMarkup=True)

            # Add the header for the second page
            header_texts = ['Executive Summary', 'Scenarios', 'Summary', 'Appendix']
            header_html = '<para alignment="center">'
            for text in header_texts:
                if text == 'Scenarios':
                    header_html += f'<u color="#65C8D0">{text}</u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
                else:
                    header_html += f'{text}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
            header_html += '</para>'

            header_paragraph = Paragraph(header_html, custom_bold_style)
            # Add header paragraph close to the top
            story.append(Spacer(1, -30))
            story.append(header_paragraph)
            story.append(Spacer(1, 20))
            add_impact_chart(story, scenario)

            accent_line = Drawing(400, 2)
            accent_line.add(Line(0, 1, 400, 1, strokeColor=colors.HexColor('#65C8D0'), strokeWidth=2))
            story.append(accent_line)
            story.append(Spacer(1, 12))

            # Add a heading for the data
            styles = getSampleStyleSheet()
            heading_style = ParagraphStyle('heading', parent=styles['Heading4'], alignment=1, spaceAfter=12)
            heading = Paragraph("Scenario Business Impact Analysis Justification", heading_style)
            story.append(heading)
            story.append(Spacer(1, 12))

            # Print each field as a bullet point item
            bullet_style = ParagraphStyle('bullet', parent=styles['BodyText'], fontSize=8, leftIndent=20, spaceAfter=6)
            bullet_points = [
                scenario.justifySafety,
                scenario.justifyLife,
                scenario.justifyReputation,
                scenario.justifyProduction,
                scenario.justifyFinancial,
                scenario.justifyData,
                scenario.justifySupply,
                scenario.justifyReputation
            ]

            for point in bullet_points:
                if point:  # Only include non-empty and non-null points
                    story.append(Paragraph(f'• {point}', bullet_style))
                    story.append(Spacer(1, 6))
            story.append(PageBreak())
            # page 2 of executive summary
            custom_bold_style = ParagraphStyle('CustomBold', parent=styles['BodyText'], fontName='Helvetica-Bold')
            body_text_style = ParagraphStyle('BodyTextWithMarkup', parent=styles['BodyText'], fontName='Helvetica',
                                             allowMarkup=True)

            # Add the header for the second page
            header_texts = ['Executive Summary', 'Scenarios', 'Summary', 'Appendix']
            header_html = '<para alignment="center">'
            for text in header_texts:
                if text == 'Scenarios':
                    header_html += f'<u color="#65C8D0">{text}</u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
                else:
                    header_html += f'{text}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
            header_html += '</para>'

            header_paragraph = Paragraph(header_html, custom_bold_style)
            # Add header paragraph close to the top
            story.append(Spacer(1, -30))
            story.append(header_paragraph)
            story.append(Spacer(1, 20))
            story.append(scenario_table)
            story.append(Spacer(1, 20))

            ref_text_style = ParagraphStyle('RefText', parent=styles['BodyText'], fontName='Helvetica', fontSize=8)

            recommendations_list = scenario.recommendations.strip().split('\n')

            # Parse the recommendations into structured data
            parsed_recommendations = []
            for rec in recommendations_list:
                num, rest = rec.split('.', 1)
                rec_text, ref = rest.rsplit('[', 1)
                ref = ref.rstrip(']')
                parsed_recommendations.append(
                    [num.strip(), Paragraph(rec_text.strip(), styles['BodyText']), Paragraph(ref.strip(), ref_text_style)])

            # Add header row to the table data
            table_data = [['#', 'Recommendation', 'Ref.']] + parsed_recommendations

            # Define the table
            col_widths = [0.08 * 450, 0.72 * 450, 0.20 * 450]
            recommendations_table = Table(table_data, colWidths=col_widths)

            # Define table style to add borders and spacing
            recommendations_table.setStyle(TableStyle([
                ('BOX', (0, 0), (-1, 0), 0, colors.white),  # No border for the outer box
                ('LINEBEFORE', (1, 1), (-1, -1), 0, colors.white),  # No border before each column
                ('LINEAFTER', (0, 0), (-1, 0), 0, colors.white),  # No border after the header row
                ('TOPPADDING', (0, 0), (-1, -1), 5),  # Padding inside each cell
                ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                ('ROWBACKGROUNDS', (0, 0), (-1, 0), [colors.lightgrey]),  # Light grey background for header row
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),  # Align text to the top of the cell
                ('LINEABOVE', (0, 1), (-1, -1), 1, colors.HexColor('#65C8D0'), None, (2, 2)),  # Dashed line above each row
                ('LINEBELOW', (0, 0), (-1, -2), 1, colors.HexColor('#65C8D0'), None, (2, 2)),  # Dashed line below each row
            ]))

            caption_text = "Recommendations"
            caption_paragraph = Paragraph(caption_text, styles['Title'])
            story.append(caption_paragraph)
            story.append(Spacer(1, 12))
            # Add the table to the story, with a Spacer to add space after the table
            story.append(recommendations_table)
            story.append(Spacer(1, 12))

            story.append(PageBreak())
            # page 2 of executive summary
            custom_bold_style = ParagraphStyle('CustomBold', parent=styles['BodyText'], fontName='Helvetica-Bold')
            body_text_style = ParagraphStyle('BodyTextWithMarkup', parent=styles['BodyText'], fontName='Helvetica',
                                             allowMarkup=True)

            # Add the header for the second page
            header_texts = ['Executive Summary', 'Scenarios', 'Summary', 'Appendix']
            header_html = '<para alignment="center">'
            for text in header_texts:
                if text == 'Scenarios':
                    header_html += f'<u color="#65C8D0">{text}</u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
                else:
                    header_html += f'{text}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
            header_html += '</para>'

            header_paragraph = Paragraph(header_html, custom_bold_style)
            # Add header paragraph close to the top
            story.append(Spacer(1, -30))
            story.append(header_paragraph)
            story.append(Spacer(1, 20))

            pdf_print_compliance_table(story, scenario, styles)

            story.append(PageBreak())

    safety_summary_title = "Appendix - Facility Safety Profile"
    safety_summary = Paragraph(safety_summary_title, styles['Heading2'])
    story.append(safety_summary)
    story.append(Spacer(1, 12))

    safety_profile_json = cyber_pha_header.facility.type.safety_profile
    safety_profile_data = json.loads(safety_profile_json)
    pdf_print_safety_profile(story, safety_profile_data, styles)
    # Cleaning and preparing the safety summary list

    story.append(PageBreak())

    chemical_summary_title = "Appendix - Facility Chemical Profile"
    chemical_summary = Paragraph(chemical_summary_title, styles['Heading2'])
    story.append(chemical_summary)
    story.append(Spacer(1, 12))
    chemical_profile_json = cyber_pha_header.facility.type.chemical_profile
    chemical_profile_data = json.loads(chemical_profile_json)
    pdf_print_chemical_profile(story, chemical_profile_data, styles)


    story.append(Spacer(1, 20))

    # Add the Threat Summary section as an appendix
    threat_summary_title = "Appendix - Facility Threat Summary"
    threat_summary_header = Paragraph(threat_summary_title, styles['Heading2'])
    story.append(PageBreak())
    story.append(threat_summary_header)
    story.append(Spacer(1, 12))

    # Split the threat summary text by numbered items and clean up each item
    threat_summary_items = cyber_pha_header.threatSummary.split('\n')
    threat_summary_items = [item.strip() for item in threat_summary_items if item.strip() != '']

    # Constructing the formatted threat summary
    threat_summary_text = "<br/><br/>".join(f"{item}" for item in threat_summary_items)

    # Define the paragraph style for the threat summary with line spacing
    threat_summary_style = ParagraphStyle(
        name='ThreatSummaryStyle',
        parent=styles['BodyText'],
        spaceBefore=10,
        spaceAfter=10
    )

    # Creating the paragraph with the threat summary
    threat_summary_paragraph = Paragraph(threat_summary_text, threat_summary_style)
    story.append(threat_summary_paragraph)
    story.append(Spacer(1, 20))

    insight_summary_title = "Appendix - Cybersecurity Insights"
    insight_summary_header = Paragraph(insight_summary_title, styles['Heading2'])
    story.append(PageBreak())
    story.append(insight_summary_header)
    story.append(Spacer(1, 12))

    # Split the threat summary text by numbered items and clean up each item
    insight_summary_items = cyber_pha_header.insightSummary.split('\n')
    insight_summary_items = [item.strip() for item in insight_summary_items if item.strip() != '']

    # Constructing the formatted threat summary
    insight_summary_text = "<br/><br/>".join(f"{item}" for item in insight_summary_items)

    # Define the paragraph style for the threat summary with line spacing
    insight_summary_style = ParagraphStyle(
        name='InsightSummaryStyle',
        parent=styles['BodyText'],
        spaceBefore=10,
        spaceAfter=10
    )

    # Creating the paragraph with the threat summary
    insight_summary_paragraph = Paragraph(insight_summary_text, insight_summary_style)
    story.append(insight_summary_paragraph)
    story.append(Spacer(1, 20))

    strategy_summary_title = "Appendix - Cybersecurity Strategy Insight"
    strategy_summary_header = Paragraph(strategy_summary_title, styles['Heading2'])
    story.append(PageBreak())
    story.append(strategy_summary_header)
    story.append(Spacer(1, 12))

    # Split the threat summary text by numbered items and clean up each item
    strategy_summary_items = cyber_pha_header.strategySummary.split('\n')
    strategy_summary_items = [item.strip() for item in strategy_summary_items if item.strip() != '']

    # Constructing the formatted threat summary
    strategy_summary_text = "<br/><br/>".join(f"{item}" for item in strategy_summary_items)

    # Define the paragraph style for the threat summary with line spacing
    strategy_summary_style = ParagraphStyle(
        name='StrategySummaryStyle',
        parent=styles['BodyText'],
        spaceBefore=10,
        spaceAfter=10
    )

    # Creating the paragraph with the threat summary
    strategy_summary_paragraph = Paragraph(strategy_summary_text, strategy_summary_style)
    story.append(strategy_summary_paragraph)
    story.append(Spacer(1, 20))

    story.append(PageBreak())
    pdf_print_glossary(story, styles)

    story.append(PageBreak())
    doc_summary_title = "Appendix - Report Description"
    doc_summary = Paragraph(doc_summary_title, styles['Heading2'])
    story.append(doc_summary)
    story.append(Spacer(1, 12))

    doc_text = "This report was generated by AnzenOT. Data relating to risk scoring and costs have been estimated based on available information at the time that data for the assessment was submitted by the user. All reported numbers and recommendations should be carefully reviewed and considered against other factors that may not be available to AnzenOT in this report such as up-to-date threat intelligence, network configurations, state of staff training, and overall maturity of cybersecurity within the organization.  "
    doc_text_summary = Paragraph(doc_text)
    story.append(doc_text_summary)
    story.append(Spacer(1, 12))

    doc_text = "AnzenOT makes no representations about the accuracy or completeness of the data presented in this report. It is recommended that the report is reviewed by OT Cybersecurity specialists familiar with the organization's overall security posture."
    doc_text_summary = Paragraph(doc_text)
    story.append(doc_text_summary)
    story.append(Spacer(1, 12))
    # Build the PDF
    doc.build(story, canvasmaker=FooterCanvas)

    # Get the value of the BytesIO buffer and write it to the response.
    pdf = buffer.getvalue()
    buffer.close()
    response.write(pdf)
    response = HttpResponse(pdf, content_type='application/pdf')
    response['Content-Disposition'] = 'inline; filename="CyberPHA.pdf"'
    return response

    # Render the pha_report.html template with the context
    # return render(request, 'pha_report.html', context)


def get_pha_records(cyber_pha_header_id):
    # Retrieve the main record from tblCyberPHAHeader
    cyber_pha_header = get_object_or_404(tblCyberPHAHeader, ID=cyber_pha_header_id)

    other_summary_list = cyber_pha_header.otherSummary.split('\n')
    other_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in other_summary_list if item)
    chemical_summary_list = cyber_pha_header.chemicalSummary.split('\n')
    chemical_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in chemical_summary_list if item)
    safety_summary_list = cyber_pha_header.safetySummary.split('\n')
    safety_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in safety_summary_list if item)
    compliance_summary_list = cyber_pha_header.complianceSummary.split('\n')
    compliance_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in compliance_summary_list if item)
    physical_summary_list = cyber_pha_header.physicalSummary.split('\n')
    physical_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in physical_summary_list if item)

    insight_summary_list = cyber_pha_header.insightSummary.split('\n')
    insight_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in insight_summary_list if item)
    strategy_summary_list = cyber_pha_header.strategySummary.split('\n')
    strategy_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in strategy_summary_list if item)
    threat_summary_list = cyber_pha_header.threatSummary.split('\n')
    threat_summary_html = ''.join(f'<p>{item.strip()}</p>' for item in threat_summary_list if item)

    # Retrieve related records from tblCyberPHAScenario
    cyber_pha_scenarios = tblCyberPHAScenario.objects.filter(CyberPHA=cyber_pha_header)
    # Scenario-wise data
    scenario_data = []
    for scenario in cyber_pha_scenarios:
        observations = PHA_Observations.objects.filter(scenario=scenario)
        observation_descriptions = [obs.observation_description for obs in observations]

        scenario_info = {
            'scenario_id': scenario.ID,
            'observations': observation_descriptions
        }
        scenario_data.append(scenario_info)

    total_cost_impact = format_currency(cyber_pha_scenarios.aggregate(Sum('sle'))['sle__sum'])

    total_cost_impact_low = format_currency(cyber_pha_scenarios.aggregate(Sum('sle_low'))['sle_low__sum'])

    total_cost_impact_high = format_currency(cyber_pha_scenarios.aggregate(Sum('sle_high'))['sle_high__sum'])

    # Summarize RiskCategory
    risk_category_summary = cyber_pha_scenarios.values('RiskCategory').annotate(count=Count('RiskCategory'))

    impact_fields = [f.name for f in tblCyberPHAScenario._meta.get_fields() if f.name.startswith('impact')]
    impact_summary = {}
    for field in impact_fields:
        avg_value = cyber_pha_scenarios.aggregate(avg_value=Avg(field))['avg_value']
        custom_name = field.replace('impact', '')
        impact_summary[custom_name] = avg_value

    # Fetch all probability values, strip the % sign, and convert to integers
    try:
        probabilities = [float(prob.probability.rstrip('%')) for prob in cyber_pha_scenarios.only('probability')]

        # Calculate the average probability
        average_probability = round(sum(probabilities) / len(probabilities) if probabilities else 0)
    except:
        average_probability = 0

    # Retrieve related records from vulnerability_analysis
    vulnerability_analyses = vulnerability_analysis.objects.filter(scenario__CyberPHA=cyber_pha_header)

    # Retrieve related records from RAActions where phaID matches the given cyber_pha_header_id
    ra_actions = RAActions.objects.filter(phaID=cyber_pha_header_id)
    ra_actions_json = serializers.serialize('json', ra_actions)
    # Retrieve related records from MitreControlAssessment
    mitre_control_assessments = MitreControlAssessment.objects.filter(cyberPHA=cyber_pha_header)

    overall_control_effectiveness = int(ceil(get_overall_control_effectiveness_score(cyber_pha_header_id)))

    # Fetch all user-defined likelihood values
    user_likelihoods = [scenario.likelihood for scenario in cyber_pha_scenarios]

    # Calculate the average user-defined likelihood
    average_user_likelihood = sum(user_likelihoods) / len(user_likelihoods) if user_likelihoods else 0

    # Calculate the overall likelihood
    # This is a weighted average where we give equal weight to user-defined likelihood and calculated likelihood
    overall_likelihood = round((average_probability + average_user_likelihood) / 2 * (
            1 - (overall_control_effectiveness / 100)))

    return {
        'cyber_pha_header': cyber_pha_header,
        'cyber_pha_scenarios': cyber_pha_scenarios,
        'average_probability': average_probability,
        'risk_category_summary': risk_category_summary,
        'impact_summary': impact_summary,
        'vulnerability_analyses': vulnerability_analyses,
        'ra_actions_json': ra_actions_json,
        'mitre_control_assessments': mitre_control_assessments,
        'total_cost_impact': total_cost_impact,
        'total_cost_impact_low': total_cost_impact_low,
        'total_cost_impact_high': total_cost_impact_high,
        'compliance_summary_html': compliance_summary_html,
        'safety_summary_html': safety_summary_html,
        'safety_summary_list': safety_summary_list,
        'chemical_summary_list': chemical_summary_list,
        'physical_summary_list': physical_summary_list,
        'chemical_summary_html': chemical_summary_html,
        'physical_summary_html': physical_summary_html,
        'other_summary_html': other_summary_html,
        'insight_summary_html': insight_summary_html,
        'strategy_summary_html': strategy_summary_html,
        'threat_summary_html': threat_summary_html,
        'overall_control_effectiveness': overall_control_effectiveness,
        'overall_likelihood': overall_likelihood
    }


class Replace(Func):
    function = 'REPLACE'
    template = "%(function)s(%(expressions)s, %(value_1)s, %(value_2)s)"


def format_currency(value):
    if value is None:
        return "$0.00"  # or whatever default or placeholder you want to use

    if value >= 1_000_000_000:  # Billions
        return "${:.1f}b".format(value / 1_000_000_000)
    elif value >= 1_000_000:  # Millions
        return "${:.1f}m".format(value / 1_000_000)
    elif value >= 1_000:  # Thousands
        return "${:.1f}k".format(value / 1_000)
    else:
        return "${:.2f}".format(value)


login_required()


def scenario_investment_report(cyber_pha_id, scenario_id):
    # Fetch the scenario and related investments
    try:
        cyber_pha = tblCyberPHAHeader.objects.get(ID=cyber_pha_id)
        scenario = tblCyberPHAScenario.objects.get(ID=scenario_id, CyberPHA_id=cyber_pha_id)
        investments = CyberSecurityInvestment.objects.filter(cyber_pha_header_id=cyber_pha_id)
    except tblCyberPHAScenario.DoesNotExist:
        return "Scenario not found."

    if not investments.exists():
        return "No investments found for this CyberPHA."

    # Construct the investment statement
    investment_statement = "\n".join(
        [f"- {inv.investment_type}: {inv.product_name} by {inv.vendor_name}, costing {inv.cost} on {inv.date}." for inv
         in investments])
    facility_details = f"Industry: {cyber_pha.Industry}, Facility Type: {cyber_pha.FacilityType}, Country: {cyber_pha.country}"
    # Construct the scenario details
    scenario_details = f"""
    Scenario: {scenario.Scenario}
    Threat Class: {scenario.ThreatClass}
    Threat Agent: {scenario.ThreatAgent}
    Threat Action: {scenario.ThreatAction}
    Countermeasures: {scenario.Countermeasures}
    """

    # Construct the impacts
    impacts = f"""
    Safety Impact: {scenario.impactSafety}
    Danger Impact: {scenario.impactDanger}
    Production Impact: {scenario.impactProduction}
    Financial Impact: {scenario.impactFinance}
    Reputation Impact: {scenario.impactReputation}
    Environment Impact: {scenario.impactEnvironment}
    Regulation Impact: {scenario.impactRegulation}
    Data Impact: {scenario.impactData}
    Supply Impact: {scenario.impactSupply}
    """

    # OpenAI prompt
    investment_impact_prompt = f"""
        Given the cybersecurity scenario for the {cyber_pha.FacilityType} in the {cyber_pha.Industry} industry, located in {cyber_pha.country}, and the following investments:
        {investment_statement}
    and considering the scenario details:
    {scenario_details}
    with the impacts as follows:
    {impacts}
    Please provide exactly 6 bullet points summarizing the impact of these investments for the given scenario on:
    1. Level of risk reduction
    2. Business impact analysis improvement
    3. Event costs mitigation
    4. Operational risks decrease
    5. Compliance enhancement
    6. Return on investment or cost savings
    Each bullet point should contain a concise statement (no more than 30 words) quantifying the impact. Be cautiously and modestly optimistic.
    """

    # Configure OpenAI API key
    openai.api_key = get_api_key("openai")
    openai_model = get_api_key("OpenAI_Model")
    # Query OpenAI API for investment impact analysis
    investment_impact_response = openai.ChatCompletion.create(
        model=openai_model,  # Ensure this model name is current and available for your use
        messages=[
            {"role": "system", "content": "You are a knowledgeable assistant about cybersecurity investments."},
            {"role": "user", "content": investment_impact_prompt}
        ],
        temperature=0.3,  # Adjust creativity
        max_tokens=800,
    )

    # Extract the response
    investment_impact_text = investment_impact_response['choices'][0]['message']['content'].strip()

    return investment_impact_text


def get_scenario_report_details(request):
    scenario_id = request.GET.get('id')

    scenario = tblCyberPHAScenario.objects.get(ID=scenario_id)

    creator_user_id = scenario.CyberPHA.UserID

    # Get the organization ID of the user who created the CyberPHA
    creator_organization_id = UserProfile.objects.filter(user_id=creator_user_id).values_list('organization_id',
                                                                                              flat=True).first()

    # Get the current user's organization ID
    current_user_organization_id = request.user.userprofile.organization_id

    # Check if the current user is the creator or belongs to the same organization
    if str(request.user.id) != creator_user_id and current_user_organization_id != creator_organization_id:
        # Log out the user
        return HttpResponseRedirect(reverse('logout'))

    cyber_pha_id = scenario.CyberPHA.ID
    investment_impact_text = scenario_investment_report(cyber_pha_id, scenario_id)

    control_effectiveness = int(ceil(get_overall_control_effectiveness_score(scenario.CyberPHA)))
    controls = scenario.controls.all().values('control', 'score', 'reference')
    sle = format_currency(scenario.sle)

    sle_low = format_currency(scenario.sle_low)

    sle_high = format_currency(scenario.sle_high)
    # calculate the overall likelihood of the scenario
    probability_value = int(round(float(scenario.probability.rstrip('%'))))

    inherent_likelihood = scenario.likelihood / 100.0  # Convert percentage to a fraction
    residual_likelihood = probability_value / 100.0  # Convert percentage to a fraction

    scenario_likelihood = categorize_likelihood((inherent_likelihood * residual_likelihood) * 100)
    # Retrieve related consequences
    consequences = ScenarioConsequences.objects.filter(scenario=scenario)
    consequences_list = [{'consequence_text': consequence.consequence_text, 'is_validated': consequence.is_validated}
                         for consequence in consequences]
    attack_tree_text = scenario.attack_tree_text
    data = {
        'impactSafety': scenario.impactSafety,
        'impactDanger': scenario.impactDanger,
        'impactProduction': scenario.impactProduction,
        'impactFinance': scenario.impactFinance,
        'impactReputation': scenario.impactReputation,
        'impactEnvironment': scenario.impactEnvironment,
        'impactRegulation': scenario.impactRegulation,
        'impactData': scenario.impactData,
        'impactSupply': scenario.impactSupply,
        'RRU': scenario.RRU,
        'UEL': scenario.UEL,
        'SM': scenario.SM,
        'MEL': scenario.MEL,
        'RRM': scenario.RRM,
        'Consequence': scenario.Consequence,
        'ThreatClass': scenario.ThreatClass,
        'RiskCategory': scenario.RiskCategory,
        'RRa': scenario.RRa,
        'recommendations': scenario.recommendations,
        'standards': scenario.standards,
        'sle': sle,
        'sle_low': sle_low,
        'sle_high': sle_high,
        'residual_risk': scenario.RRa,
        'control_effectiveness': control_effectiveness,
        'scenario_likelihood': scenario_likelihood,
        'controls': list(controls),
        'Consequences': consequences_list,
        'attack_tree_text': attack_tree_text,
        'investment_impact': investment_impact_text
    }
    return JsonResponse(data)


def categorize_likelihood(likelihood_percentage):
    if 0 <= likelihood_percentage <= 20:
        return "Low"
    elif 21 <= likelihood_percentage <= 40:
        return "Low/Medium"
    elif 41 <= likelihood_percentage <= 60:
        return "Medium"
    elif 61 <= likelihood_percentage <= 80:
        return "Medium/High"
    else:
        return "High"


@login_required
def qraw_reports(request, qraw_id):
    referrer = request.META.get('HTTP_REFERER')

    if not referrer or 'qraw' not in referrer:
        return HttpResponseForbidden()
    # Get the related records using the function we defined earlier
    context = get_qraw_records(qraw_id)

    # Render the pha_report.html template with the context
    return render(request, 'qraw_report.html', context)


def get_qraw_records(qraw_id):
    # Retrieve the main record from tblRAWorksheet
    qraw_header = get_object_or_404(RAWorksheet, ID=qraw_id)

    # Retrieve related records from tblCyberPHAScenario
    qraw_scenarios = RAWorksheetScenario.objects.filter(RAWorksheetID=qraw_id)

    total_cost_impact = format_currency(qraw_scenarios.aggregate(Sum('event_cost_median'))['event_cost_median__sum'])

    total_cost_impact_low = format_currency(qraw_scenarios.aggregate(Sum('event_cost_low'))['event_cost_low__sum'])

    total_cost_impact_high = format_currency(qraw_scenarios.aggregate(Sum('event_cost_high'))['event_cost_high__sum'])

    # Summarize RiskCategory
    risk_category_summary = qraw_scenarios.values('threatSource').annotate(count=Count('threatSource'))

    model_class = RAWorksheetScenario

    # Define a set of fields to exclude
    exclude_fields = {'RiskScore', 'ThreatScore', 'VulnScore', 'OperationScore'}

    # Adjust the list comprehension to exclude the unwanted fields
    impact_fields = [f.name for f in model_class._meta.get_fields() if
                     'score' in f.name.lower() and f.name not in exclude_fields]

    impact_summary = {}
    for field in impact_fields:
        avg_value = qraw_scenarios.aggregate(avg_value=Avg(field))['avg_value']
        custom_name = field.replace('Score', '')
        custom_name = custom_name.title()
        impact_summary[custom_name] = avg_value

    # Retrieve related records from RAActions where phaID matches the given cyber_pha_header_id
    ra_actions = RAActions.objects.filter(RAWorksheetID=qraw_id)

    overall_scores = qraw_scenarios.aggregate(
        avg_vulnerability=Avg('VulnScore'),
        avg_threat=Avg('ThreatScore'),
        avg_inherent_risk=Avg('RiskScore'),
        avg_residual_risk=Avg('residual_risk')
    )

    # Normalize the scores to be out of 10
    normalized_scores = {
        'overall_vulnerability_score': overall_scores['avg_vulnerability'],
        'overall_threat_score': overall_scores['avg_threat'],
        'overall_inherent_risk_score': overall_scores['avg_inherent_risk'],
        'overall_residual_risk_score': overall_scores['avg_residual_risk']
    }
    anychart_key = get_api_key('anychart')
    return {
        'risk_category_summary': risk_category_summary,
        'qraw_header': qraw_header,
        'impact_summary': impact_summary,
        'ra_actions': ra_actions,
        'total_cost_impact': total_cost_impact,
        'total_cost_impact_low': total_cost_impact_low,
        'total_cost_impact_high': total_cost_impact_high,
        'qraw_scenarios': qraw_scenarios,
        'anychart_key': anychart_key,
        **normalized_scores
    }


def get_qraw_scenario_report_details(request):
    scenario_id = request.GET.get('id');

    scenario = RAWorksheetScenario.objects.get(ID=scenario_id)
    # Retrieve associated controls for the scenario
    controls = scenario.controls.all().values('control', 'score')

    event_cost_low = format_currency(scenario.event_cost_low)

    event_cost_median = format_currency(scenario.event_cost_median)

    event_cost_high = format_currency(scenario.event_cost_high)

    data = {
        'impactSafety': scenario.SafetyScore,
        'impactDanger': scenario.lifeScore,
        'impactProduction': scenario.productionScore,
        'impactFinance': scenario.FinancialScore,
        'impactReputation': scenario.ReputationScore,
        'impactEnvironment': scenario.environmentScore,
        'impactRegulation': scenario.regulatoryScore,
        'impactData': scenario.DataScore,
        'impactSupply': scenario.SupplyChainScore,
        'risk_summary': scenario.riskSummary,
        'residual_risk': scenario.residual_risk,
        'inherent_risk_score': scenario.RiskScore,
        'inherent_risk_status': scenario.RiskStatus,
        'outage': scenario.outage,
        'event_cost_low': event_cost_low,
        'event_cost_median': event_cost_median,
        'event_cost_high': event_cost_high,
        'vulnerability_score': scenario.VulnScore,
        'threat_score': scenario.ThreatScore,
        'threat_source': scenario.threatSource,
        'controls': list(controls),
        'consequences': scenario.raw_consequences,
        'executive_summary': scenario.executive_summary,
        'scenario_damage': scenario.scenario_damage

    }
    return JsonResponse(data)


def get_risk_rating(value):
    if value in [0, 1, 2]:
        return "Low"
    elif value in [3, 4]:
        return "Low/Medium"
    elif value in [5, 6]:
        return "Medium"
    elif value == 7:
        return "Medium/High"
    elif value in [8, 9]:
        return "High"
    elif value == 10:
        return "Very High"
    return ""


def parse_executive_summary(executive_summary, style):
    lines = executive_summary.split('\n')
    table_data = []
    for line in lines:
        parts = line.split('. ', 1)
        if len(parts) == 2:
            number = Paragraph(parts[0], style)
            text_and_reference = parts[1].rsplit(' [', 1)
            if len(text_and_reference) == 2:
                text = Paragraph(text_and_reference[0], style)
                reference = Paragraph('[' + text_and_reference[1], style)  # Add the leading bracket back
                table_data.append([number, text, reference])
    return table_data


def parse_consequences(raw_consequences, style):
    lines = raw_consequences.split('\n')
    bullet_points = []
    for line in lines:
        if line.startswith('- '):
            bullet_points.append(Paragraph(line[2:], style))
    return bullet_points


@login_required()
def raw_reports(request, raw_id):
    p = inflect.engine()
    raw_header = get_object_or_404(RAWorksheet, ID=raw_id)
    user_profile = request.user.userprofile
    organization = user_profile.organization
    # Get the ID of the user who created the CyberPHA
    creator_user_id = raw_header.UserID
    current_user_organization_id = raw_header.organization_id

    context = get_raw_records(raw_id)
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'inline; filename="report.pdf"'

    buffer = BytesIO()
    # Create a canvas and a PDF document.
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    story = []

    styles = getSampleStyleSheet()

    def onFirstPage(canvas, doc):
        canvas.saveState()
        canvas.setTitle("CyberPHA Report")
        width, height = letter

        # Assuming the logo is stored correctly in your static directory
        logo_path = os.path.join('static/images', 'anzenot_highres_small.jpg')
        canvas.drawImage(logo_path, width / 2.1 - 50, height / 1.8, 150, 150, mask='auto')  # Center the logo

        # Draw 'Report for' and 'Prepared for' text
        canvas.setFont('Helvetica-Bold', 12)
        canvas.drawString(inch, height / 2 - 40, f"Report for: {raw_header.BusinessUnit}")
        canvas.drawString(inch, height / 2 - 70, f"Prepared for: {organization.name}")
        current_date = date.today().strftime("%B %d, %Y")
        canvas.setFont('Helvetica', 12)
        canvas.drawString(inch, height / 2 - 120, current_date)
        canvas.restoreState()

    doc.build(story, onFirstPage=onFirstPage)
    story.append(PageBreak())
    custom_bold_style = ParagraphStyle('CustomBold', parent=styles['BodyText'], fontName='Helvetica-Bold')
    body_text_style = ParagraphStyle('BodyTextWithMarkup', parent=styles['BodyText'], fontName='Helvetica',
                                     allowMarkup=True)

    # Add a title
    report_title = f"Risk Assessment Report for {raw_header.BusinessUnit}"
    title = Paragraph(report_title, styles['Title'])
    story.append(title)
    story.append(Spacer(1, 20))  # Add some space below the title

    # Add Executive Summary section
    executive_summary_title = "Executive Summary"
    executive_summary = Paragraph(executive_summary_title, styles['Heading2'])
    story.append(executive_summary)
    story.append(Spacer(1, 12))

    executive_summary_text = f"This is a report for a risk assessment conducted at {raw_header.BusinessUnit}, a {raw_header.BusinessUnitType} at {raw_header.business_unit_address_line1}, {raw_header.business_unit_city}, {raw_header.business_unit_postcode}, {raw_header.business_unit_country}. The assessment was conducted on {raw_header.RADate} by {raw_header.AssessorName}"
    summary_paragraph = Paragraph(executive_summary_text, styles['BodyText'])
    story.append(summary_paragraph)
    story.append(Spacer(1, 12))

    # Data for the table
    table_data = [
        ["Risk Assessment Title:", raw_header.RATitle],
        ["Reason for risk assessment (Trigger Event):", raw_header.RATrigger],
        ["Asset or observation under assessment:", raw_header.asset]
    ]

    # Create the table
    table = Table(table_data, hAlign='LEFT')

    # Define the table style
    table.setStyle(TableStyle([
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('TOPPADDING', (0, 0), (-1, -1), 12),
        ('LEFTPADDING', (0, 0), (-1, -1), 5),
        ('RIGHTPADDING', (0, 0), (-1, -1), 0),
        # Add more styling as needed
    ]))
    story.append(table)
    story.append(Spacer(1, 12))

    styles = getSampleStyleSheet()
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=1, spaceBefore=6, spaceAfter=6,
                                  fontSize=10)

    # Prepare data and labels for the bar chart
    impact_data = context['impact_summary']
    data = [list(impact_data.values())]  # Data for the chart
    categories = list(impact_data.keys())  # Category labels

    # Creating a drawing for the chart
    width, height = 450, 250
    drawing = Drawing(width, height)
    chart = VerticalBarChart()
    chart.x = 50
    chart.y = 75
    chart.height = 125
    chart.width = 300
    chart.data = data
    chart.categoryAxis.categoryNames = categories
    chart.valueAxis.valueMin = 0
    chart.valueAxis.valueMax = max(data[0]) + 1  # Set max value slightly higher than the max data value
    chart.bars[0].fillColor = colors.skyblue

    # Chart styles
    chart.categoryAxis.labels.boxAnchor = 'n'  # North alignment for category labels
    chart.categoryAxis.labels.angle = 45  # Optional: tilt the labels for better fit
    chart.categoryAxis.labels.fontSize = 8
    chart.categoryAxis.labels.dy = -10
    chart.categoryAxis.labels.dx = -10

    # Add the chart to the drawing
    drawing.add(chart)
    border = Rect(0, 0, width, height, strokeColor=colors.black, strokeWidth=1, fillColor=None)
    drawing.add(border)
    # Add a caption above the chart
    caption_text = "<b>Overall Scenario Business Impact Analysis</b>"
    caption_paragraph = Paragraph(caption_text, center_style)
    story.append(caption_paragraph)  # Adding caption above the chart
    story.append(drawing)  # Add the drawing with the chart to the story
    story.append(Spacer(1, 20))

    raw_scenarios = context['raw_scenarios']
    scenario_count = len(raw_scenarios)  # Count the scenarios
    if scenario_count == 1:
        scenario_count_text = "One scenario was considered for this assessment. The scenario is described in the section below."
    else:
        scenario_count_text = f"{p.number_to_words(scenario_count).capitalize()} scenarios were considered for this assessment. The scenarios are described in the sections below."
    scenario_count_paragraph = Paragraph(scenario_count_text, styles['BodyText'])
    story.append(scenario_count_paragraph)
    story.append(Spacer(1, 12))

    story.append(PageBreak())

    # end of executive summary page
    scenarios_title = "Scenarios"
    scenarios_header = Paragraph(scenarios_title, styles['Heading2'])
    story.append(scenarios_header)
    story.append(Spacer(1, 12))
    center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER)
    raw_scenarios = context['raw_scenarios']
    first_scenario = True

    for index, scenario in enumerate(raw_scenarios, start=1):
        if index > 1:
            # Add a PageBreak before every new scenario after the first
            story.append(PageBreak())
            # Create a header for each scenario using its 'Scenario' attribute
        scenario_title = f"Scenario {index}: {scenario.ScenarioDescription}"
        scenario_header = Paragraph(scenario_title, styles['Heading3'])
        story.append(scenario_header)
        story.append(Spacer(1, 10))

        styles = getSampleStyleSheet()
        center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                      spaceAfter=6, fontSize=12)
        # Decode the base64 image
        image_data = base64.b64decode(scenario.bowtie)
        image = Image(BytesIO(image_data))  # Image object instantiated correctly without 'y'
        available_width = 5 * inch  # Assuming the page width is 8 inches, half of it is 4 inches
        aspect_ratio = image.drawHeight / image.drawWidth
        image.drawWidth = available_width
        image.drawHeight = available_width * aspect_ratio
        story.append(image)
        story.append(Spacer(1, 10))

        # Add the bar chart
        bar_chart = create_bar_chart(scenario)
        story.append(bar_chart)

        story.append(Spacer(1, 14))

        styles = getSampleStyleSheet()
        center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                      spaceAfter=6, fontSize=12)

        # Determine risk ratings
        bia = get_risk_rating(scenario.overall_bia)
        scenario_probability_rating = get_risk_rating(scenario.scenario_probability)

        # Create paragraphs with risk ratings
        bia_paragraph = Paragraph(f"Overall BIA: {bia} ({scenario.overall_bia}/10)",
                                  center_style)
        scenario_probability_paragraph = Paragraph(
            f"Scenario Probability: {scenario_probability_rating} ({scenario.scenario_probability}/10)", center_style)

        story.append(bia_paragraph)
        story.append(Spacer(1, 10))
        story.append(scenario_probability_paragraph)
        story.append(Spacer(1, 12))

        bullet_point_style = ParagraphStyle(name='Bullet', parent=styles['BodyText'], spaceBefore=3, spaceAfter=3,
                                            leftIndent=20)

        # Add the Scenario Consequences section
        consequences_title = Paragraph("Scenario Consequences", styles['Heading4'])
        story.append(consequences_title)
        story.append(Spacer(1, 10))

        consequences_paragraphs = parse_consequences(scenario.raw_consequences, bullet_point_style)
        for paragraph in consequences_paragraphs:
            story.append(paragraph)
            story.append(Spacer(1, 5))

        # Add the Estimated Damage section
        damage_title = Paragraph("Estimated Damage", styles['Heading4'])
        story.append(damage_title)
        story.append(Spacer(1, 10))

        damage_paragraph = Paragraph(scenario.scenario_damage, styles['BodyText'])
        story.append(damage_paragraph)
        story.append(Spacer(1, 12))

        styles = getSampleStyleSheet()
        center_style = ParagraphStyle(name='Center', parent=styles['BodyText'], alignment=TA_CENTER, spaceBefore=6,
                                      spaceAfter=6, fontSize=12)
        table_cell_style = ParagraphStyle(name='TableCell', parent=styles['BodyText'], fontSize=10, spaceBefore=3,
                                          spaceAfter=3)
        action_items_title = Paragraph("Action Items", styles['Heading4'])
        story.append(action_items_title)
        story.append(Spacer(1, 10))
        # Parse executive summary into table data
        table_data = parse_executive_summary(scenario.executive_summary, table_cell_style)

        # Define the table
        col_widths = [0.5 * inch, 4 * inch, 2.5 * inch]  # Adjust column widths as needed
        exec_summary_table = Table(table_data, colWidths=col_widths)

        # Define table style
        exec_summary_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('LEFTPADDING', (0, 0), (-1, -1), 10),
            ('RIGHTPADDING', (0, 0), (-1, -1), 10),
            ('TOPPADDING', (0, 0), (-1, -1), 5),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 5)
        ]))

        # Add the table to the story
        story.append(exec_summary_table)
        story.append(Spacer(1, 12))
    doc.build(story, canvasmaker=FooterCanvas)

    pdf = buffer.getvalue()
    buffer.close()
    response.write(pdf)
    response = HttpResponse(pdf, content_type='application/pdf')
    response['Content-Disposition'] = 'inline; filename="CyberPHA.pdf"'
    return response


def get_raw_records(raw_id):
    raw_header = get_object_or_404(RAWorksheet, ID=raw_id)

    raw_scenarios = RAWorksheetScenario.objects.filter(RAWorksheetID=raw_id)

    field_label_mapping = {
        'SafetyScore': 'Safety',
        'ReputationScore': 'Reputation',
        'FinancialScore': 'Finance',
        'DataScore': 'Data',
        'SupplyChainScore': 'Supply Chain',
        'lifeScore': 'Danger',
        'productionScore': 'Operations',
        'environmentScore': 'Environment',
        'regulatoryScore': 'Compliance'
    }

    impact_fields = list(field_label_mapping.keys())
    impact_summary = {}

    # Aggregate the data and populate the impact_summary with user-friendly labels
    for field in impact_fields:
        avg_value = raw_scenarios.aggregate(avg_value=Avg(field))['avg_value']
        custom_label = field_label_mapping[field]
        impact_summary[custom_label] = avg_value if avg_value is not None else 0

    return {
        'raw_header': raw_header,
        'impact_summary': impact_summary,
        'raw_scenarios': raw_scenarios
    }
